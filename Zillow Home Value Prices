{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOaJS+/5rW0kx6YmQliDKUe",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Nyakatodianah/Nyakatodianah/blob/main/Nyakato_Dianah_Data_Visualization_Belt_Exam.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Loading the Data**"
      ],
      "metadata": {
        "id": "xnjD3VjTGgAL"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GF2Le02xCo-A",
        "outputId": "ec679ed6-f4d7-40b2-d979-1380d0c0508a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas<2.0.0 in /usr/local/lib/python3.10/dist-packages (1.5.3)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas<2.0.0) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<2.0.0) (2023.4)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas<2.0.0) (1.25.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas<2.0.0) (1.16.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install \"pandas<2.0.0\""
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install joblib\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HFkjOx5RC6BX",
        "outputId": "7c43ccee-b0cd-45fd-f632-154d6996f788"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (1.4.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import joblib"
      ],
      "metadata": {
        "id": "-1ALeeatLVxT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#add a new folder to week 13\n",
        "import os\n",
        "os.makedirs('/content/drive/MyDrive/CodingDojo/02-MachineLearning/Week13/Models',exist_ok=True)"
      ],
      "metadata": {
        "id": "PTz__OmcEXA5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Confirm creation of new folder\n",
        "os.listdir('/content/drive/MyDrive/CodingDojo/02-MachineLearning/Week13/Models')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7r7Bj2qEFnkU",
        "outputId": "1038365b-72fc-4080-9eda-11e6987daffa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Autompg.joblib', 'Autompg']"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Add Autompg subfolder to Models\n",
        "os.makedirs('/content/drive/MyDrive/CodingDojo/02-MachineLearning/Week13/Models/Autompg',exist_ok=True)\n",
        "# Confirm creation of new folder\n",
        "os.listdir('/content/drive/MyDrive/CodingDojo/02-MachineLearning/Week13/Models/Autompg')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C_bnnjLJGF--",
        "outputId": "89d1f733-f59d-4758-af34-b430bf5cefb9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "path = '/content/drive/MyDrive/CodingDojo/02-MachineLearning/saved_model.joblib'\n",
        "df = joblib.load(path)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "edVbLZ7sGeJX",
        "outputId": "4ee2bc14-3b71-4d3d-807c-547c5bba92af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'preprocessor': ColumnTransformer(transformers=[('pipeline-1',\n",
              "                                  Pipeline(steps=[('simpleimputer',\n",
              "                                                   SimpleImputer())]),\n",
              "                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7deee8eda410>),\n",
              "                                 ('pipeline-2',\n",
              "                                  Pipeline(steps=[('simpleimputer',\n",
              "                                                   SimpleImputer(fill_value='MISSING',\n",
              "                                                                 strategy='constant')),\n",
              "                                                  ('onehotencoder',\n",
              "                                                   OneHotEncoder(drop='if_binary',\n",
              "                                                                 sparse=False))]),\n",
              "                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7deee8ed9600>)],\n",
              "                   verbose_feature_names_out=False),\n",
              " 'X_train':       Lot Area  Lot Frontage  Overall Cond  Total Bsmt SF Central Air  \\\n",
              " 853      16269           NaN             5         907.00           Y   \n",
              " 1055     13891        107.00             5       1,710.00           Y   \n",
              " 2483      8900           NaN             4       1,056.00           Y   \n",
              " 2351     11475         85.00             6         713.00           Y   \n",
              " 1700     13654        118.00             5       1,704.00           Y   \n",
              " ...        ...           ...           ...            ...         ...   \n",
              " 1425     11778         91.00             5       2,271.00           Y   \n",
              " 1833     10678         85.00             5       1,683.00           Y   \n",
              " 2847     10890         60.00             5       1,058.00           Y   \n",
              " 124       8800         80.00             7         936.00           Y   \n",
              " 2586      7700         55.00             7         301.00           Y   \n",
              " \n",
              "       Gr Liv Area  TotRms AbvGrd Street  \n",
              " 853           907              5   Pave  \n",
              " 1055         1710              6   Pave  \n",
              " 2483         1056              5   Pave  \n",
              " 2351         1552              6   Pave  \n",
              " 1700         2758              9   Pave  \n",
              " ...           ...            ...    ...  \n",
              " 1425         2276              7   Pave  \n",
              " 1833         2872              9   Pave  \n",
              " 2847         1551              6   Pave  \n",
              " 124          1054              6   Pave  \n",
              " 2586         1145              6   Pave  \n",
              " \n",
              " [2197 rows x 8 columns],\n",
              " 'X_test':       Lot Area  Lot Frontage  Overall Cond  Total Bsmt SF Central Air  \\\n",
              " 343      13860         75.00             7       1,952.00           Y   \n",
              " 1413      8405         50.00             8         861.00           Y   \n",
              " 2583     11310         75.00             5       1,367.00           Y   \n",
              " 2020      6180         60.00             5         960.00           N   \n",
              " 348       8530           NaN             5         384.00           Y   \n",
              " ...        ...           ...           ...            ...         ...   \n",
              " 2223     25485           NaN             4       1,560.00           Y   \n",
              " 1922     11988         90.00             6       1,244.00           Y   \n",
              " 1497     47007        123.00             7           0.00           Y   \n",
              " 656      10800         60.00             7         676.00           Y   \n",
              " 1404      5190         50.00             5         570.00           Y   \n",
              " \n",
              "       Gr Liv Area  TotRms AbvGrd Street  \n",
              " 343          2704              9   Pave  \n",
              " 1413         1367              7   Pave  \n",
              " 2583         1375              5   Pave  \n",
              " 2020          986              5   Pave  \n",
              " 348          1474              7   Pave  \n",
              " ...           ...            ...    ...  \n",
              " 2223         1560              6   Pave  \n",
              " 1922         1244              6   Pave  \n",
              " 1497         3820             11   Pave  \n",
              " 656          1352              7   Pave  \n",
              " 1404         1079              5   Pave  \n",
              " \n",
              " [733 rows x 8 columns],\n",
              " 'y_train': 853     140000\n",
              " 1055    372402\n",
              " 2483    107000\n",
              " 2351    179900\n",
              " 1700    418000\n",
              "          ...  \n",
              " 1425    475000\n",
              " 1833    285000\n",
              " 2847    137000\n",
              " 124     137500\n",
              " 2586    127000\n",
              " Name: SalePrice, Length: 2197, dtype: int64,\n",
              " 'y_test': 343     345000\n",
              " 1413    119000\n",
              " 2583    140000\n",
              " 2020    102000\n",
              " 348     168500\n",
              "          ...  \n",
              " 2223    201000\n",
              " 1922    150000\n",
              " 1497    284700\n",
              " 656     149000\n",
              " 1404    125600\n",
              " Name: SalePrice, Length: 733, dtype: int64,\n",
              " 'LinearRegression': LinearRegression(fit_intercept=False),\n",
              " 'RandomForestRegressor': RandomForestRegressor()}"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Assign each of the keys from the dictionary as a separate variable.\n",
        "print(\"Keys in the Dictionary:\",df.keys())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z0iecLwBMeUp",
        "outputId": "2310fdb7-7c3f-4f51-a3a7-60af15a7b01b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Keys in the Dictionary: dict_keys(['preprocessor', 'X_train', 'X_test', 'y_train', 'y_test', 'LinearRegression', 'RandomForestRegressor'])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Loading data and objects as separate variables\n",
        "X_train = df['X_train']\n",
        "y_train = df['y_train']\n",
        "X_test = df['X_test']\n",
        "y_test = df['y_test']\n",
        "preprocessor = df['preprocessor']\n",
        "LinearRegression = df['LinearRegression']\n",
        "RandomForestRegressor = df['RandomForestRegressor']\n",
        "\n",
        "## saving variables.\n",
        "import joblib\n",
        "## creating a dictionary of all of the variables\n",
        "variable_comb = {'X_train':X_train,\n",
        "         'y_train': y_train,\n",
        "         'X_test':X_test,\n",
        "          \"y_test\": y_test,\n",
        "         'preprocessor':preprocessor,\n",
        "         'RandomForestRegressor':RandomForestRegressor}\n",
        "variable_comb"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZTsjGpyWNNmp",
        "outputId": "d7628938-1bac-4e6d-dc41-a180aff1903d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'X_train':       Lot Area  Lot Frontage  Overall Cond  Total Bsmt SF Central Air  \\\n",
              " 853      16269           NaN             5         907.00           Y   \n",
              " 1055     13891        107.00             5       1,710.00           Y   \n",
              " 2483      8900           NaN             4       1,056.00           Y   \n",
              " 2351     11475         85.00             6         713.00           Y   \n",
              " 1700     13654        118.00             5       1,704.00           Y   \n",
              " ...        ...           ...           ...            ...         ...   \n",
              " 1425     11778         91.00             5       2,271.00           Y   \n",
              " 1833     10678         85.00             5       1,683.00           Y   \n",
              " 2847     10890         60.00             5       1,058.00           Y   \n",
              " 124       8800         80.00             7         936.00           Y   \n",
              " 2586      7700         55.00             7         301.00           Y   \n",
              " \n",
              "       Gr Liv Area  TotRms AbvGrd Street  \n",
              " 853           907              5   Pave  \n",
              " 1055         1710              6   Pave  \n",
              " 2483         1056              5   Pave  \n",
              " 2351         1552              6   Pave  \n",
              " 1700         2758              9   Pave  \n",
              " ...           ...            ...    ...  \n",
              " 1425         2276              7   Pave  \n",
              " 1833         2872              9   Pave  \n",
              " 2847         1551              6   Pave  \n",
              " 124          1054              6   Pave  \n",
              " 2586         1145              6   Pave  \n",
              " \n",
              " [2197 rows x 8 columns],\n",
              " 'y_train': 853     140000\n",
              " 1055    372402\n",
              " 2483    107000\n",
              " 2351    179900\n",
              " 1700    418000\n",
              "          ...  \n",
              " 1425    475000\n",
              " 1833    285000\n",
              " 2847    137000\n",
              " 124     137500\n",
              " 2586    127000\n",
              " Name: SalePrice, Length: 2197, dtype: int64,\n",
              " 'X_test':       Lot Area  Lot Frontage  Overall Cond  Total Bsmt SF Central Air  \\\n",
              " 343      13860         75.00             7       1,952.00           Y   \n",
              " 1413      8405         50.00             8         861.00           Y   \n",
              " 2583     11310         75.00             5       1,367.00           Y   \n",
              " 2020      6180         60.00             5         960.00           N   \n",
              " 348       8530           NaN             5         384.00           Y   \n",
              " ...        ...           ...           ...            ...         ...   \n",
              " 2223     25485           NaN             4       1,560.00           Y   \n",
              " 1922     11988         90.00             6       1,244.00           Y   \n",
              " 1497     47007        123.00             7           0.00           Y   \n",
              " 656      10800         60.00             7         676.00           Y   \n",
              " 1404      5190         50.00             5         570.00           Y   \n",
              " \n",
              "       Gr Liv Area  TotRms AbvGrd Street  \n",
              " 343          2704              9   Pave  \n",
              " 1413         1367              7   Pave  \n",
              " 2583         1375              5   Pave  \n",
              " 2020          986              5   Pave  \n",
              " 348          1474              7   Pave  \n",
              " ...           ...            ...    ...  \n",
              " 2223         1560              6   Pave  \n",
              " 1922         1244              6   Pave  \n",
              " 1497         3820             11   Pave  \n",
              " 656          1352              7   Pave  \n",
              " 1404         1079              5   Pave  \n",
              " \n",
              " [733 rows x 8 columns],\n",
              " 'y_test': 343     345000\n",
              " 1413    119000\n",
              " 2583    140000\n",
              " 2020    102000\n",
              " 348     168500\n",
              "          ...  \n",
              " 2223    201000\n",
              " 1922    150000\n",
              " 1497    284700\n",
              " 656     149000\n",
              " 1404    125600\n",
              " Name: SalePrice, Length: 733, dtype: int64,\n",
              " 'preprocessor': ColumnTransformer(transformers=[('pipeline-1',\n",
              "                                  Pipeline(steps=[('simpleimputer',\n",
              "                                                   SimpleImputer())]),\n",
              "                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7deee8eda410>),\n",
              "                                 ('pipeline-2',\n",
              "                                  Pipeline(steps=[('simpleimputer',\n",
              "                                                   SimpleImputer(fill_value='MISSING',\n",
              "                                                                 strategy='constant')),\n",
              "                                                  ('onehotencoder',\n",
              "                                                   OneHotEncoder(drop='if_binary',\n",
              "                                                                 sparse=False))]),\n",
              "                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7deee8ed9600>)],\n",
              "                   verbose_feature_names_out=False),\n",
              " 'RandomForestRegressor': RandomForestRegressor()}"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# saving the export dict as a joblib file--saving to new Models/Autompg folder\n",
        "joblib.dump(variable_comb, '/content/drive/MyDrive/CodingDojo/02-MachineLearning/Week13/Models/Autompg.joblib')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xr6HPjkjOZKf",
        "outputId": "b218d89b-9059-4b15-ca53-03aa2ecd4e71"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['/content/drive/MyDrive/CodingDojo/02-MachineLearning/Week13/Models/Autompg.joblib']"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#confirm file has been saved\n",
        "loaded = joblib.load('/content/drive/MyDrive/CodingDojo/02-MachineLearning/saved_model.joblib')\n",
        "loaded.keys()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q_9k1ReAOuva",
        "outputId": "099774d0-9ba9-4eb6-fc28-2455ddfeeeb5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_keys(['preprocessor', 'X_train', 'X_test', 'y_train', 'y_test', 'LinearRegression', 'RandomForestRegressor'])"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Use the preprocessor to transform the X_train/X_test data into processed dataframes.\n",
        "X_train_processed = preprocessor.transform(X_train)\n",
        "X_test_processed = preprocessor.transform(X_test)\n",
        "X_train_processed\n",
        "X_test_processed"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3n0Pr1jiPgqK",
        "outputId": "9a9b0f39-a08f-4056-b223-2c60e15f96f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1.3860e+04, 7.5000e+01, 7.0000e+00, ..., 9.0000e+00, 1.0000e+00,\n",
              "        1.0000e+00],\n",
              "       [8.4050e+03, 5.0000e+01, 8.0000e+00, ..., 7.0000e+00, 1.0000e+00,\n",
              "        1.0000e+00],\n",
              "       [1.1310e+04, 7.5000e+01, 5.0000e+00, ..., 5.0000e+00, 1.0000e+00,\n",
              "        1.0000e+00],\n",
              "       ...,\n",
              "       [4.7007e+04, 1.2300e+02, 7.0000e+00, ..., 1.1000e+01, 1.0000e+00,\n",
              "        1.0000e+00],\n",
              "       [1.0800e+04, 6.0000e+01, 7.0000e+00, ..., 7.0000e+00, 1.0000e+00,\n",
              "        1.0000e+00],\n",
              "       [5.1900e+03, 5.0000e+01, 5.0000e+00, ..., 5.0000e+00, 1.0000e+00,\n",
              "        1.0000e+00]])"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Replace the column names with the correct feature names extracted from the preprocessor.\n",
        "X_train.columns = preprocessor.get_feature_names_out()\n",
        "X_test.columns = preprocessor.get_feature_names_out()\n",
        "X_train\n",
        "X_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "0xX25iUCQKXb",
        "outputId": "9b709d77-24e6-4131-ea72-e07d46d90d07"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Lot Area  Lot Frontage  Overall Cond  Total Bsmt SF Gr Liv Area  \\\n",
              "343      13860         75.00             7       1,952.00           Y   \n",
              "1413      8405         50.00             8         861.00           Y   \n",
              "2583     11310         75.00             5       1,367.00           Y   \n",
              "2020      6180         60.00             5         960.00           N   \n",
              "348       8530           NaN             5         384.00           Y   \n",
              "...        ...           ...           ...            ...         ...   \n",
              "2223     25485           NaN             4       1,560.00           Y   \n",
              "1922     11988         90.00             6       1,244.00           Y   \n",
              "1497     47007        123.00             7           0.00           Y   \n",
              "656      10800         60.00             7         676.00           Y   \n",
              "1404      5190         50.00             5         570.00           Y   \n",
              "\n",
              "      TotRms AbvGrd  Central Air_Y Street_Pave  \n",
              "343            2704              9        Pave  \n",
              "1413           1367              7        Pave  \n",
              "2583           1375              5        Pave  \n",
              "2020            986              5        Pave  \n",
              "348            1474              7        Pave  \n",
              "...             ...            ...         ...  \n",
              "2223           1560              6        Pave  \n",
              "1922           1244              6        Pave  \n",
              "1497           3820             11        Pave  \n",
              "656            1352              7        Pave  \n",
              "1404           1079              5        Pave  \n",
              "\n",
              "[733 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d50bc205-37fb-4698-b944-330d59cd144f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Lot Area</th>\n",
              "      <th>Lot Frontage</th>\n",
              "      <th>Overall Cond</th>\n",
              "      <th>Total Bsmt SF</th>\n",
              "      <th>Gr Liv Area</th>\n",
              "      <th>TotRms AbvGrd</th>\n",
              "      <th>Central Air_Y</th>\n",
              "      <th>Street_Pave</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>343</th>\n",
              "      <td>13860</td>\n",
              "      <td>75.00</td>\n",
              "      <td>7</td>\n",
              "      <td>1,952.00</td>\n",
              "      <td>Y</td>\n",
              "      <td>2704</td>\n",
              "      <td>9</td>\n",
              "      <td>Pave</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1413</th>\n",
              "      <td>8405</td>\n",
              "      <td>50.00</td>\n",
              "      <td>8</td>\n",
              "      <td>861.00</td>\n",
              "      <td>Y</td>\n",
              "      <td>1367</td>\n",
              "      <td>7</td>\n",
              "      <td>Pave</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2583</th>\n",
              "      <td>11310</td>\n",
              "      <td>75.00</td>\n",
              "      <td>5</td>\n",
              "      <td>1,367.00</td>\n",
              "      <td>Y</td>\n",
              "      <td>1375</td>\n",
              "      <td>5</td>\n",
              "      <td>Pave</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020</th>\n",
              "      <td>6180</td>\n",
              "      <td>60.00</td>\n",
              "      <td>5</td>\n",
              "      <td>960.00</td>\n",
              "      <td>N</td>\n",
              "      <td>986</td>\n",
              "      <td>5</td>\n",
              "      <td>Pave</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>348</th>\n",
              "      <td>8530</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>384.00</td>\n",
              "      <td>Y</td>\n",
              "      <td>1474</td>\n",
              "      <td>7</td>\n",
              "      <td>Pave</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2223</th>\n",
              "      <td>25485</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4</td>\n",
              "      <td>1,560.00</td>\n",
              "      <td>Y</td>\n",
              "      <td>1560</td>\n",
              "      <td>6</td>\n",
              "      <td>Pave</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1922</th>\n",
              "      <td>11988</td>\n",
              "      <td>90.00</td>\n",
              "      <td>6</td>\n",
              "      <td>1,244.00</td>\n",
              "      <td>Y</td>\n",
              "      <td>1244</td>\n",
              "      <td>6</td>\n",
              "      <td>Pave</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1497</th>\n",
              "      <td>47007</td>\n",
              "      <td>123.00</td>\n",
              "      <td>7</td>\n",
              "      <td>0.00</td>\n",
              "      <td>Y</td>\n",
              "      <td>3820</td>\n",
              "      <td>11</td>\n",
              "      <td>Pave</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>656</th>\n",
              "      <td>10800</td>\n",
              "      <td>60.00</td>\n",
              "      <td>7</td>\n",
              "      <td>676.00</td>\n",
              "      <td>Y</td>\n",
              "      <td>1352</td>\n",
              "      <td>7</td>\n",
              "      <td>Pave</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1404</th>\n",
              "      <td>5190</td>\n",
              "      <td>50.00</td>\n",
              "      <td>5</td>\n",
              "      <td>570.00</td>\n",
              "      <td>Y</td>\n",
              "      <td>1079</td>\n",
              "      <td>5</td>\n",
              "      <td>Pave</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>733 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d50bc205-37fb-4698-b944-330d59cd144f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d50bc205-37fb-4698-b944-330d59cd144f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d50bc205-37fb-4698-b944-330d59cd144f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5e2857a0-5033-4f07-875b-bac148603ac5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5e2857a0-5033-4f07-875b-bac148603ac5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5e2857a0-5033-4f07-875b-bac148603ac5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_b7a1020c-736f-4860-9c18-29249504d4d7\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_b7a1020c-736f-4860-9c18-29249504d4d7 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('X_test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X_test",
              "summary": "{\n  \"name\": \"X_test\",\n  \"rows\": 733,\n  \"fields\": [\n    {\n      \"column\": \"Lot Area\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5204,\n        \"min\": 1491,\n        \"max\": 57200,\n        \"num_unique_values\": 604,\n        \"samples\": [\n          9297,\n          7890,\n          10650\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lot Frontage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.145020027663893,\n        \"min\": 21.0,\n        \"max\": 195.0,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          77.0,\n          112.0,\n          107.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Overall Cond\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          2,\n          8,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total Bsmt SF\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 406.1935815990484,\n        \"min\": 0.0,\n        \"max\": 3138.0,\n        \"num_unique_values\": 478,\n        \"samples\": [\n          1200.0,\n          832.0,\n          799.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gr Liv Area\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"N\",\n          \"Y\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TotRms AbvGrd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 492,\n        \"min\": 334,\n        \"max\": 4676,\n        \"num_unique_values\": 549,\n        \"samples\": [\n          1718,\n          930\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Central Air_Y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 12,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          6,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Street_Pave\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Grvl\",\n          \"Pave\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Explain the Linear Regression Model**"
      ],
      "metadata": {
        "id": "_sAtg-gSQ8yb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Extract the coefficients and save them as a Series with the correct feature names as the index.\n",
        "LinearRegression.coef_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a36K-8iBQ7kN",
        "outputId": "6d0c50a7-ef92-437e-99eb-b702b8a92f80"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 1.10428754e-01,  8.79663271e+01,  1.41612957e+01,  6.07389601e+01,\n",
              "        1.03864442e+02, -7.38974003e+03,  3.42004104e+04, -3.04921243e+04])"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "coefficients = [1.10428754e-01, 8.79663271e+01, 1.41612957e+01, 6.07389601e+01, 1.03864442e+02, -7.38974003e+03, 3.42004104e+04, -3.04921243e+04]\n",
        "\n",
        "# Create a Series with coefficients\n",
        "coefficients_series = pd.Series(coefficients)\n",
        "\n",
        "# Print or use the coefficients Series\n",
        "print(coefficients_series)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x_5nms8rQ6f6",
        "outputId": "67885247-8b97-4485-a0e6-383d08143d1f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0         0.11\n",
            "1        87.97\n",
            "2        14.16\n",
            "3        60.74\n",
            "4       103.86\n",
            "5    -7,389.74\n",
            "6    34,200.41\n",
            "7   -30,492.12\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Change the pandas option for float format to display the coefficients with pandas in a readable comma separator for thousands and 2 decimal places.\n",
        "pd.options.display.float_format = '{:,.2f}'.format\n",
        "coefficients_series"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j9dDRuJNUHvI",
        "outputId": "8a4962e5-e0d5-4fb0-8b6b-4bdc72886709"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0         0.11\n",
              "1        87.97\n",
              "2        14.16\n",
              "3        60.74\n",
              "4       103.86\n",
              "5    -7,389.74\n",
              "6    34,200.41\n",
              "7   -30,492.12\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a bar graph of the coefficients, sorted from largest to smallest. Note: bars may not be visible for coefficients with very small magnitudes\n",
        "import matplotlib.pyplot as plt\n",
        "coefficients_series.plot(kind='bar')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "XSj953xJYwYN",
        "outputId": "a92d4714-6541-4816-c65e-3f064b2fce91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 68
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Provide a quantitative interpretation (both magnitude and directionality) of the four largest positive coefficients explaining how that feature impacts the target.\n",
        "q1 = coefficients_series.nlargest(4)\n",
        "q1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GcuZ-nruUkrM",
        "outputId": "b362646b-8592-40a0-8626-b06f3c2ef070"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6   34,200.41\n",
              "4      103.86\n",
              "1       87.97\n",
              "3       60.74\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Provide a quantitative interpretation (both magnitude and directionality)  of the two largest negative coefficients explaining how that feature impacts the target\n",
        "q2 = coefficients_series.nsmallest(2)\n",
        "q2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_DwBfPbnU2hj",
        "outputId": "8051350e-1ae5-4074-ffec-480cc17ea11c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7   -30,492.12\n",
              "5    -7,389.74\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Explain the Random Forest Model:**"
      ],
      "metadata": {
        "id": "fFKpRK0tVN3U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Extract and create a bar graph of the feature importances, sorted from largest to smallest.\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "sorted_feature_importances = RandomForestRegressor.feature_importances_\n",
        "sorted_feature_names = X_train.columns\n",
        "\n",
        "# Sort the feature importances and feature names together\n",
        "sorted_indices = np.argsort(sorted_feature_importances)[::-1]\n",
        "sorted_feature_importances = sorted_feature_importances[sorted_indices]\n",
        "sorted_feature_names = sorted_feature_names[sorted_indices]\n",
        "\n",
        "#sort the coefficeints by magnitude\n",
        "sorted_feature_importances = np.abs(sorted_feature_importances)\n",
        "# Create a bar graph\n",
        "plt.figure(figsize=(12, 8))\n",
        "plt.bar(sorted_feature_names, sorted_feature_importances, color='skyblue')\n",
        "plt.xlabel('Features')\n",
        "# Changed the ylabel variable name to avoid conflict\n",
        "plt.ylabel('Feature Importances (Sorted)')\n",
        "plt.title('Feature Importances (Sorted)')\n",
        "plt.xticks(rotation=70)\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 809
        },
        "id": "61s2cpYMcnor",
        "outputId": "d75e5d63-e57a-4de9-eb21-5a175d7ec42b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#What are the top 4 most important features?\n",
        "top_4_features = sorted_feature_names[:4]\n",
        "top_4_features"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "033bc_6tjdBK",
        "outputId": "e74c9e5b-6bc1-4b5c-9c95-3f6582b8964b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Gr Liv Area', 'Total Bsmt SF', 'Lot Area', 'Lot Frontage'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Of the top 4 most important features, identify which of these features also appeared in the 4 largest positive or 2 largest negative coefficients.\n",
        "four_largest = coefficients_series.nlargest(4)\n",
        "four_largest\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4nQkcD8_4f5M",
        "outputId": "111cea82-0dcb-453c-c238-9ff8c029a23d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6   34,200.41\n",
              "4      103.86\n",
              "1       87.97\n",
              "3       60.74\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Apply Shap to Explain the Random Forest Model\n",
        "#installing shap\n",
        "!pip install shap\n",
        "import shap\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rV4VaZpS5CGU",
        "outputId": "7e0da968-5fac-405b-80e9-3c71ac6b033c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: shap in /usr/local/lib/python3.10/dist-packages (0.45.1)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from shap) (1.25.2)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from shap) (1.11.4)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from shap) (1.2.2)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from shap) (1.5.3)\n",
            "Requirement already satisfied: tqdm>=4.27.0 in /usr/local/lib/python3.10/dist-packages (from shap) (4.66.4)\n",
            "Requirement already satisfied: packaging>20.9 in /usr/local/lib/python3.10/dist-packages (from shap) (24.0)\n",
            "Requirement already satisfied: slicer==0.0.8 in /usr/local/lib/python3.10/dist-packages (from shap) (0.0.8)\n",
            "Requirement already satisfied: numba in /usr/local/lib/python3.10/dist-packages (from shap) (0.58.1)\n",
            "Requirement already satisfied: cloudpickle in /usr/local/lib/python3.10/dist-packages (from shap) (2.2.1)\n",
            "Requirement already satisfied: llvmlite<0.42,>=0.41.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba->shap) (0.41.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas->shap) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->shap) (2023.4)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->shap) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->shap) (3.5.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas->shap) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Apply Shap to Explain the Random Forest Model\n",
        "shap_values = shap.TreeExplainer(RandomForestRegressor).shap_values(X_train_processed)\n",
        "shap_values"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NX0p9bEU7uTU",
        "outputId": "e6fa4877-12c8-45eb-e043-da6d805d28ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 5.78345776e+03,  9.74391789e+02,  1.97750764e+02, ...,\n",
              "         1.18909580e+03,  1.71630555e+03,  1.20059452e+02],\n",
              "       [ 8.10396016e+03,  1.71905434e+04,  3.18441259e+03, ...,\n",
              "         1.07394305e+04,  1.38132902e+03,  1.81434681e+01],\n",
              "       [-2.39606667e+03,  1.17828136e+01, -2.30306153e+04, ...,\n",
              "        -1.71282164e+02,  1.89559729e+03,  3.77254410e+01],\n",
              "       ...,\n",
              "       [-2.53328104e+03, -8.59174751e+03,  1.56986508e+03, ...,\n",
              "         7.46540789e+02,  1.42280489e+03,  1.94301039e+01],\n",
              "       [-1.61177112e+03,  1.25997349e+03,  6.80557709e+02, ...,\n",
              "         8.63799268e+02,  1.75197910e+03,  6.79061972e+01],\n",
              "       [-1.14226838e+03, -1.36346517e+03,  1.65453146e+03, ...,\n",
              "         9.64277083e+02,  2.08409374e+03,  1.30955576e+02]])"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Sample 500 rows of the processed X_train data as X_shap, using random_state=321\n",
        "X_shap = X_train_processed[:500]\n",
        "X_shap"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hO7KmGzm80df",
        "outputId": "9649d7ac-c462-4412-a197-0a29aaeaa827"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1.62690000e+04, 6.92306849e+01, 5.00000000e+00, ...,\n",
              "        5.00000000e+00, 1.00000000e+00, 1.00000000e+00],\n",
              "       [1.38910000e+04, 1.07000000e+02, 5.00000000e+00, ...,\n",
              "        6.00000000e+00, 1.00000000e+00, 1.00000000e+00],\n",
              "       [8.90000000e+03, 6.92306849e+01, 4.00000000e+00, ...,\n",
              "        5.00000000e+00, 1.00000000e+00, 1.00000000e+00],\n",
              "       ...,\n",
              "       [1.46010000e+04, 8.50000000e+01, 5.00000000e+00, ...,\n",
              "        8.00000000e+00, 1.00000000e+00, 1.00000000e+00],\n",
              "       [1.58100000e+04, 5.90000000e+01, 5.00000000e+00, ...,\n",
              "        7.00000000e+00, 1.00000000e+00, 1.00000000e+00],\n",
              "       [7.50000000e+03, 6.30000000e+01, 5.00000000e+00, ...,\n",
              "        6.00000000e+00, 1.00000000e+00, 1.00000000e+00]])"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Save the corresponding y_train values as y_shap\n",
        "y_shap = y_train[:500]\n",
        "y_shap"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D8yg9UaP9TRx",
        "outputId": "2a0429d9-8146-4771-d7aa-aef79e403da1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "853     140000\n",
              "1055    372402\n",
              "2483    107000\n",
              "2351    179900\n",
              "1700    418000\n",
              "         ...  \n",
              "2137    134900\n",
              "1588    209200\n",
              "967     315000\n",
              "1727    181755\n",
              "534     152000\n",
              "Name: SalePrice, Length: 500, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a shap model explainer for the random forest model\n",
        "shap_explainer = shap.TreeExplainer(RandomForestRegressor)\n",
        "shap_values = shap_explainer.shap_values(X_shap)\n",
        "shap_values"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xGDyvuKU9cXN",
        "outputId": "0f5e213e-03e7-4750-99bd-1be5dd757c07"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 5.78345776e+03,  9.74391789e+02,  1.97750764e+02, ...,\n",
              "         1.18909580e+03,  1.71630555e+03,  1.20059452e+02],\n",
              "       [ 8.10396016e+03,  1.71905434e+04,  3.18441259e+03, ...,\n",
              "         1.07394305e+04,  1.38132902e+03,  1.81434681e+01],\n",
              "       [-2.39606667e+03,  1.17828136e+01, -2.30306153e+04, ...,\n",
              "        -1.71282164e+02,  1.89559729e+03,  3.77254410e+01],\n",
              "       ...,\n",
              "       [ 1.32021730e+04,  3.19404871e+03,  3.90404029e+03, ...,\n",
              "        -2.34065312e+03,  1.56775049e+03,  1.82525488e+01],\n",
              "       [ 8.01264523e+03, -1.65601039e+03,  4.80796101e+03, ...,\n",
              "         1.16500946e+02,  1.99195931e+03,  5.01981063e+01],\n",
              "       [-1.24667459e+03,  4.57401356e+02,  1.91706988e+03, ...,\n",
              "         6.84586429e+02,  1.80481749e+03,  2.88628720e+01]])"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Calculate the shap values for the sampled data\n",
        "shap_values = shap_explainer.shap_values(X_shap)\n",
        "shap_values"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gs1ljUTi-Dxk",
        "outputId": "56e8c347-cd50-4538-f32a-6452efa69b7b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 5.78345776e+03,  9.74391789e+02,  1.97750764e+02, ...,\n",
              "         1.18909580e+03,  1.71630555e+03,  1.20059452e+02],\n",
              "       [ 8.10396016e+03,  1.71905434e+04,  3.18441259e+03, ...,\n",
              "         1.07394305e+04,  1.38132902e+03,  1.81434681e+01],\n",
              "       [-2.39606667e+03,  1.17828136e+01, -2.30306153e+04, ...,\n",
              "        -1.71282164e+02,  1.89559729e+03,  3.77254410e+01],\n",
              "       ...,\n",
              "       [ 1.32021730e+04,  3.19404871e+03,  3.90404029e+03, ...,\n",
              "        -2.34065312e+03,  1.56775049e+03,  1.82525488e+01],\n",
              "       [ 8.01264523e+03, -1.65601039e+03,  4.80796101e+03, ...,\n",
              "         1.16500946e+02,  1.99195931e+03,  5.01981063e+01],\n",
              "       [-1.24667459e+03,  4.57401356e+02,  1.91706988e+03, ...,\n",
              "         6.84586429e+02,  1.80481749e+03,  2.88628720e+01]])"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a summary plot (plot_type=’dot’) of the most important features, according to shap.\n",
        "shap.summary_plot(shap_values, X_shap, plot_type='dot')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        },
        "id": "hFFdNtxv-lM0",
        "outputId": "25cf53b2-6c33-49fb-fb6b-19616af8614c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x470 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Interpret the top 6 most important features. According to shap, what effect does each feature have on the model’s prediction?\n",
        "six_most_important = shap.summary_plot(shap_values, X_shap, plot_type='bar')\n",
        "six_most_important\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        },
        "id": "Af19tCXE_RRF",
        "outputId": "35067796-9f73-49d4-f9c3-b10e8fa97fe5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x470 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "l2hbm4NHn5y8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **PART 2**"
      ],
      "metadata": {
        "id": "8HwoE07PFZSP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Load the provided csv, located in the zip file you downloaded in Part 1.\n",
        "path = '/content/zillow data.csv'\n",
        "zillow_data = pd.read_csv(path)\n",
        "zillow_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 825
        },
        "id": "Ue0nXDD7FYz3",
        "outputId": "b06b2e45-7230-4ef6-88cb-d2621d192dd0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       RegionID  SizeRank  RegionName RegionType StateName State  \\\n",
              "0         91940         0       77449        zip        TX    TX   \n",
              "1         91982         1       77494        zip        TX    TX   \n",
              "2         93144         2       79936        zip        TX    TX   \n",
              "3         62080         3       11368        zip        NY    NY   \n",
              "4         62093         4       11385        zip        NY    NY   \n",
              "...         ...       ...         ...        ...       ...   ...   \n",
              "21205     74039     21934       36768        zip        AL    AL   \n",
              "21206     65127     21934       17582        zip        PA    PA   \n",
              "21207     63700     21934       14740        zip        NY    NY   \n",
              "21208     78407     21934       47020        zip        IN    IN   \n",
              "21209     70029     21938       28556        zip        NC    NC   \n",
              "\n",
              "                  City                                  Metro  \\\n",
              "0                  NaN   Houston-The Woodlands-Sugar Land, TX   \n",
              "1                  NaN   Houston-The Woodlands-Sugar Land, TX   \n",
              "2              El Paso                            El Paso, TX   \n",
              "3             New York  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "4             New York  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "...                ...                                    ...   \n",
              "21205              NaN                                    NaN   \n",
              "21206  Washington Boro                          Lancaster, PA   \n",
              "21207            Gerry         Jamestown-Dunkirk-Fredonia, NY   \n",
              "21208         Florence                                    NaN   \n",
              "21209         Oriental                           New Bern, NC   \n",
              "\n",
              "               CountyName   31012000  ...   28022022   31032022   30042022  \\\n",
              "0           Harris County 107,261.00  ... 261,945.00 267,644.00 273,946.00   \n",
              "1        Fort Bend County 222,569.00  ... 453,150.00 464,727.00 478,369.00   \n",
              "2          El Paso County  90,009.00  ... 177,319.00 179,463.00 182,812.00   \n",
              "3           Queens County 188,096.00  ... 570,211.00 572,145.00 573,662.00   \n",
              "4           Queens County 275,983.00  ... 752,025.00 757,734.00 760,336.00   \n",
              "...                   ...        ...  ...        ...        ...        ...   \n",
              "21205       Wilcox County        NaN  ...  90,249.00  90,596.00  90,936.00   \n",
              "21206    Lancaster County        NaN  ... 322,656.00 325,898.00 329,389.00   \n",
              "21207   Chautauqua County  50,791.00  ... 151,009.00 152,305.00 155,312.00   \n",
              "21208  Switzerland County        NaN  ... 185,581.00 186,648.00 189,096.00   \n",
              "21209      Pamlico County        NaN  ...        NaN        NaN        NaN   \n",
              "\n",
              "        31052022   30062022   31072022   31082022   30092022   31102022  \\\n",
              "0     280,066.00 285,121.00 288,532.00 290,458.00 291,103.00 292,081.00   \n",
              "1     489,712.00 497,173.00 499,429.00 497,572.00 498,113.00 500,187.00   \n",
              "2     186,403.00 189,836.00 192,064.00 193,760.00 195,140.00 196,787.00   \n",
              "3     576,469.00 578,706.00 580,834.00 581,779.00 584,566.00 588,188.00   \n",
              "4     766,163.00 771,443.00 776,607.00 779,281.00 782,367.00 788,211.00   \n",
              "...          ...        ...        ...        ...        ...        ...   \n",
              "21205  91,010.00  90,619.00  90,348.00  89,680.00  90,149.00  89,358.00   \n",
              "21206 332,130.00 334,382.00 334,925.00 334,196.00 333,734.00 334,633.00   \n",
              "21207 158,570.00 162,928.00 164,508.00 165,006.00 164,405.00 163,577.00   \n",
              "21208 190,725.00 193,663.00 195,434.00 196,729.00 196,707.00 196,997.00   \n",
              "21209        NaN        NaN        NaN        NaN        NaN        NaN   \n",
              "\n",
              "        30112022  \n",
              "0     292,948.00  \n",
              "1     503,109.00  \n",
              "2     198,137.00  \n",
              "3     590,722.00  \n",
              "4     793,924.00  \n",
              "...          ...  \n",
              "21205  89,241.00  \n",
              "21206 338,109.00  \n",
              "21207 162,744.00  \n",
              "21208 197,093.00  \n",
              "21209        NaN  \n",
              "\n",
              "[21210 rows x 284 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-55d8d1f1-bc7a-4112-9b51-af3ee90b5f36\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RegionID</th>\n",
              "      <th>SizeRank</th>\n",
              "      <th>RegionName</th>\n",
              "      <th>RegionType</th>\n",
              "      <th>StateName</th>\n",
              "      <th>State</th>\n",
              "      <th>City</th>\n",
              "      <th>Metro</th>\n",
              "      <th>CountyName</th>\n",
              "      <th>31012000</th>\n",
              "      <th>...</th>\n",
              "      <th>28022022</th>\n",
              "      <th>31032022</th>\n",
              "      <th>30042022</th>\n",
              "      <th>31052022</th>\n",
              "      <th>30062022</th>\n",
              "      <th>31072022</th>\n",
              "      <th>31082022</th>\n",
              "      <th>30092022</th>\n",
              "      <th>31102022</th>\n",
              "      <th>30112022</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>91940</td>\n",
              "      <td>0</td>\n",
              "      <td>77449</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Houston-The Woodlands-Sugar Land, TX</td>\n",
              "      <td>Harris County</td>\n",
              "      <td>107,261.00</td>\n",
              "      <td>...</td>\n",
              "      <td>261,945.00</td>\n",
              "      <td>267,644.00</td>\n",
              "      <td>273,946.00</td>\n",
              "      <td>280,066.00</td>\n",
              "      <td>285,121.00</td>\n",
              "      <td>288,532.00</td>\n",
              "      <td>290,458.00</td>\n",
              "      <td>291,103.00</td>\n",
              "      <td>292,081.00</td>\n",
              "      <td>292,948.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>91982</td>\n",
              "      <td>1</td>\n",
              "      <td>77494</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Houston-The Woodlands-Sugar Land, TX</td>\n",
              "      <td>Fort Bend County</td>\n",
              "      <td>222,569.00</td>\n",
              "      <td>...</td>\n",
              "      <td>453,150.00</td>\n",
              "      <td>464,727.00</td>\n",
              "      <td>478,369.00</td>\n",
              "      <td>489,712.00</td>\n",
              "      <td>497,173.00</td>\n",
              "      <td>499,429.00</td>\n",
              "      <td>497,572.00</td>\n",
              "      <td>498,113.00</td>\n",
              "      <td>500,187.00</td>\n",
              "      <td>503,109.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>93144</td>\n",
              "      <td>2</td>\n",
              "      <td>79936</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>El Paso</td>\n",
              "      <td>El Paso, TX</td>\n",
              "      <td>El Paso County</td>\n",
              "      <td>90,009.00</td>\n",
              "      <td>...</td>\n",
              "      <td>177,319.00</td>\n",
              "      <td>179,463.00</td>\n",
              "      <td>182,812.00</td>\n",
              "      <td>186,403.00</td>\n",
              "      <td>189,836.00</td>\n",
              "      <td>192,064.00</td>\n",
              "      <td>193,760.00</td>\n",
              "      <td>195,140.00</td>\n",
              "      <td>196,787.00</td>\n",
              "      <td>198,137.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>62080</td>\n",
              "      <td>3</td>\n",
              "      <td>11368</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>188,096.00</td>\n",
              "      <td>...</td>\n",
              "      <td>570,211.00</td>\n",
              "      <td>572,145.00</td>\n",
              "      <td>573,662.00</td>\n",
              "      <td>576,469.00</td>\n",
              "      <td>578,706.00</td>\n",
              "      <td>580,834.00</td>\n",
              "      <td>581,779.00</td>\n",
              "      <td>584,566.00</td>\n",
              "      <td>588,188.00</td>\n",
              "      <td>590,722.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>62093</td>\n",
              "      <td>4</td>\n",
              "      <td>11385</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>275,983.00</td>\n",
              "      <td>...</td>\n",
              "      <td>752,025.00</td>\n",
              "      <td>757,734.00</td>\n",
              "      <td>760,336.00</td>\n",
              "      <td>766,163.00</td>\n",
              "      <td>771,443.00</td>\n",
              "      <td>776,607.00</td>\n",
              "      <td>779,281.00</td>\n",
              "      <td>782,367.00</td>\n",
              "      <td>788,211.00</td>\n",
              "      <td>793,924.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21205</th>\n",
              "      <td>74039</td>\n",
              "      <td>21934</td>\n",
              "      <td>36768</td>\n",
              "      <td>zip</td>\n",
              "      <td>AL</td>\n",
              "      <td>AL</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Wilcox County</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>90,249.00</td>\n",
              "      <td>90,596.00</td>\n",
              "      <td>90,936.00</td>\n",
              "      <td>91,010.00</td>\n",
              "      <td>90,619.00</td>\n",
              "      <td>90,348.00</td>\n",
              "      <td>89,680.00</td>\n",
              "      <td>90,149.00</td>\n",
              "      <td>89,358.00</td>\n",
              "      <td>89,241.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21206</th>\n",
              "      <td>65127</td>\n",
              "      <td>21934</td>\n",
              "      <td>17582</td>\n",
              "      <td>zip</td>\n",
              "      <td>PA</td>\n",
              "      <td>PA</td>\n",
              "      <td>Washington Boro</td>\n",
              "      <td>Lancaster, PA</td>\n",
              "      <td>Lancaster County</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>322,656.00</td>\n",
              "      <td>325,898.00</td>\n",
              "      <td>329,389.00</td>\n",
              "      <td>332,130.00</td>\n",
              "      <td>334,382.00</td>\n",
              "      <td>334,925.00</td>\n",
              "      <td>334,196.00</td>\n",
              "      <td>333,734.00</td>\n",
              "      <td>334,633.00</td>\n",
              "      <td>338,109.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21207</th>\n",
              "      <td>63700</td>\n",
              "      <td>21934</td>\n",
              "      <td>14740</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>Gerry</td>\n",
              "      <td>Jamestown-Dunkirk-Fredonia, NY</td>\n",
              "      <td>Chautauqua County</td>\n",
              "      <td>50,791.00</td>\n",
              "      <td>...</td>\n",
              "      <td>151,009.00</td>\n",
              "      <td>152,305.00</td>\n",
              "      <td>155,312.00</td>\n",
              "      <td>158,570.00</td>\n",
              "      <td>162,928.00</td>\n",
              "      <td>164,508.00</td>\n",
              "      <td>165,006.00</td>\n",
              "      <td>164,405.00</td>\n",
              "      <td>163,577.00</td>\n",
              "      <td>162,744.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21208</th>\n",
              "      <td>78407</td>\n",
              "      <td>21934</td>\n",
              "      <td>47020</td>\n",
              "      <td>zip</td>\n",
              "      <td>IN</td>\n",
              "      <td>IN</td>\n",
              "      <td>Florence</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Switzerland County</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>185,581.00</td>\n",
              "      <td>186,648.00</td>\n",
              "      <td>189,096.00</td>\n",
              "      <td>190,725.00</td>\n",
              "      <td>193,663.00</td>\n",
              "      <td>195,434.00</td>\n",
              "      <td>196,729.00</td>\n",
              "      <td>196,707.00</td>\n",
              "      <td>196,997.00</td>\n",
              "      <td>197,093.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21209</th>\n",
              "      <td>70029</td>\n",
              "      <td>21938</td>\n",
              "      <td>28556</td>\n",
              "      <td>zip</td>\n",
              "      <td>NC</td>\n",
              "      <td>NC</td>\n",
              "      <td>Oriental</td>\n",
              "      <td>New Bern, NC</td>\n",
              "      <td>Pamlico County</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>21210 rows × 284 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55d8d1f1-bc7a-4112-9b51-af3ee90b5f36')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-55d8d1f1-bc7a-4112-9b51-af3ee90b5f36 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-55d8d1f1-bc7a-4112-9b51-af3ee90b5f36');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-249e2658-ba5d-4314-8664-d235cef1eb00\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-249e2658-ba5d-4314-8664-d235cef1eb00')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-249e2658-ba5d-4314-8664-d235cef1eb00 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_6e531bf6-5c60-4012-be6f-7f30524ec547\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('zillow_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_6e531bf6-5c60-4012-be6f-7f30524ec547 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('zillow_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "zillow_data"
            }
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#displaying zillow data columns\n",
        "zillow_data.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rCULdvABQnR2",
        "outputId": "daf11eb0-87b9-409c-8df9-8be5401ce8af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['RegionID', 'SizeRank', 'RegionName', 'RegionType', 'StateName',\n",
              "       'State', 'City', 'Metro', 'CountyName', '31012000',\n",
              "       ...\n",
              "       '28022022', '31032022', '30042022', '31052022', '30062022', '31072022',\n",
              "       '31082022', '30092022', '31102022', '30112022'],\n",
              "      dtype='object', length=284)"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Prepare the data as a time series DataFrame\n",
        "new_zillow_data = pd.DataFrame(zillow_data)\n",
        "new_zillow_data.drop(columns=['RegionID'], inplace=True)\n",
        "new_zillow_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 825
        },
        "id": "xzREAt1xGrdU",
        "outputId": "b51cf5e8-bf05-492b-de7a-050fc2eb269a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       SizeRank  RegionName RegionType StateName State             City  \\\n",
              "0             0       77449        zip        TX    TX              NaN   \n",
              "1             1       77494        zip        TX    TX              NaN   \n",
              "2             2       79936        zip        TX    TX          El Paso   \n",
              "3             3       11368        zip        NY    NY         New York   \n",
              "4             4       11385        zip        NY    NY         New York   \n",
              "...         ...         ...        ...       ...   ...              ...   \n",
              "21205     21934       36768        zip        AL    AL              NaN   \n",
              "21206     21934       17582        zip        PA    PA  Washington Boro   \n",
              "21207     21934       14740        zip        NY    NY            Gerry   \n",
              "21208     21934       47020        zip        IN    IN         Florence   \n",
              "21209     21938       28556        zip        NC    NC         Oriental   \n",
              "\n",
              "                                       Metro          CountyName   31012000  \\\n",
              "0       Houston-The Woodlands-Sugar Land, TX       Harris County 107,261.00   \n",
              "1       Houston-The Woodlands-Sugar Land, TX    Fort Bend County 222,569.00   \n",
              "2                                El Paso, TX      El Paso County  90,009.00   \n",
              "3      New York-Newark-Jersey City, NY-NJ-PA       Queens County 188,096.00   \n",
              "4      New York-Newark-Jersey City, NY-NJ-PA       Queens County 275,983.00   \n",
              "...                                      ...                 ...        ...   \n",
              "21205                                    NaN       Wilcox County        NaN   \n",
              "21206                          Lancaster, PA    Lancaster County        NaN   \n",
              "21207         Jamestown-Dunkirk-Fredonia, NY   Chautauqua County  50,791.00   \n",
              "21208                                    NaN  Switzerland County        NaN   \n",
              "21209                           New Bern, NC      Pamlico County        NaN   \n",
              "\n",
              "        29022000  ...   28022022   31032022   30042022   31052022   30062022  \\\n",
              "0     107,274.00  ... 261,945.00 267,644.00 273,946.00 280,066.00 285,121.00   \n",
              "1     222,885.00  ... 453,150.00 464,727.00 478,369.00 489,712.00 497,173.00   \n",
              "2      90,009.00  ... 177,319.00 179,463.00 182,812.00 186,403.00 189,836.00   \n",
              "3     190,588.00  ... 570,211.00 572,145.00 573,662.00 576,469.00 578,706.00   \n",
              "4     277,855.00  ... 752,025.00 757,734.00 760,336.00 766,163.00 771,443.00   \n",
              "...          ...  ...        ...        ...        ...        ...        ...   \n",
              "21205        NaN  ...  90,249.00  90,596.00  90,936.00  91,010.00  90,619.00   \n",
              "21206        NaN  ... 322,656.00 325,898.00 329,389.00 332,130.00 334,382.00   \n",
              "21207  50,931.00  ... 151,009.00 152,305.00 155,312.00 158,570.00 162,928.00   \n",
              "21208        NaN  ... 185,581.00 186,648.00 189,096.00 190,725.00 193,663.00   \n",
              "21209        NaN  ...        NaN        NaN        NaN        NaN        NaN   \n",
              "\n",
              "        31072022   31082022   30092022   31102022   30112022  \n",
              "0     288,532.00 290,458.00 291,103.00 292,081.00 292,948.00  \n",
              "1     499,429.00 497,572.00 498,113.00 500,187.00 503,109.00  \n",
              "2     192,064.00 193,760.00 195,140.00 196,787.00 198,137.00  \n",
              "3     580,834.00 581,779.00 584,566.00 588,188.00 590,722.00  \n",
              "4     776,607.00 779,281.00 782,367.00 788,211.00 793,924.00  \n",
              "...          ...        ...        ...        ...        ...  \n",
              "21205  90,348.00  89,680.00  90,149.00  89,358.00  89,241.00  \n",
              "21206 334,925.00 334,196.00 333,734.00 334,633.00 338,109.00  \n",
              "21207 164,508.00 165,006.00 164,405.00 163,577.00 162,744.00  \n",
              "21208 195,434.00 196,729.00 196,707.00 196,997.00 197,093.00  \n",
              "21209        NaN        NaN        NaN        NaN        NaN  \n",
              "\n",
              "[21210 rows x 283 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-47467f0b-4029-4218-bd1f-66ce735a2621\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SizeRank</th>\n",
              "      <th>RegionName</th>\n",
              "      <th>RegionType</th>\n",
              "      <th>StateName</th>\n",
              "      <th>State</th>\n",
              "      <th>City</th>\n",
              "      <th>Metro</th>\n",
              "      <th>CountyName</th>\n",
              "      <th>31012000</th>\n",
              "      <th>29022000</th>\n",
              "      <th>...</th>\n",
              "      <th>28022022</th>\n",
              "      <th>31032022</th>\n",
              "      <th>30042022</th>\n",
              "      <th>31052022</th>\n",
              "      <th>30062022</th>\n",
              "      <th>31072022</th>\n",
              "      <th>31082022</th>\n",
              "      <th>30092022</th>\n",
              "      <th>31102022</th>\n",
              "      <th>30112022</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>77449</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Houston-The Woodlands-Sugar Land, TX</td>\n",
              "      <td>Harris County</td>\n",
              "      <td>107,261.00</td>\n",
              "      <td>107,274.00</td>\n",
              "      <td>...</td>\n",
              "      <td>261,945.00</td>\n",
              "      <td>267,644.00</td>\n",
              "      <td>273,946.00</td>\n",
              "      <td>280,066.00</td>\n",
              "      <td>285,121.00</td>\n",
              "      <td>288,532.00</td>\n",
              "      <td>290,458.00</td>\n",
              "      <td>291,103.00</td>\n",
              "      <td>292,081.00</td>\n",
              "      <td>292,948.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>77494</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Houston-The Woodlands-Sugar Land, TX</td>\n",
              "      <td>Fort Bend County</td>\n",
              "      <td>222,569.00</td>\n",
              "      <td>222,885.00</td>\n",
              "      <td>...</td>\n",
              "      <td>453,150.00</td>\n",
              "      <td>464,727.00</td>\n",
              "      <td>478,369.00</td>\n",
              "      <td>489,712.00</td>\n",
              "      <td>497,173.00</td>\n",
              "      <td>499,429.00</td>\n",
              "      <td>497,572.00</td>\n",
              "      <td>498,113.00</td>\n",
              "      <td>500,187.00</td>\n",
              "      <td>503,109.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>79936</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>El Paso</td>\n",
              "      <td>El Paso, TX</td>\n",
              "      <td>El Paso County</td>\n",
              "      <td>90,009.00</td>\n",
              "      <td>90,009.00</td>\n",
              "      <td>...</td>\n",
              "      <td>177,319.00</td>\n",
              "      <td>179,463.00</td>\n",
              "      <td>182,812.00</td>\n",
              "      <td>186,403.00</td>\n",
              "      <td>189,836.00</td>\n",
              "      <td>192,064.00</td>\n",
              "      <td>193,760.00</td>\n",
              "      <td>195,140.00</td>\n",
              "      <td>196,787.00</td>\n",
              "      <td>198,137.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>11368</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>188,096.00</td>\n",
              "      <td>190,588.00</td>\n",
              "      <td>...</td>\n",
              "      <td>570,211.00</td>\n",
              "      <td>572,145.00</td>\n",
              "      <td>573,662.00</td>\n",
              "      <td>576,469.00</td>\n",
              "      <td>578,706.00</td>\n",
              "      <td>580,834.00</td>\n",
              "      <td>581,779.00</td>\n",
              "      <td>584,566.00</td>\n",
              "      <td>588,188.00</td>\n",
              "      <td>590,722.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>11385</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>275,983.00</td>\n",
              "      <td>277,855.00</td>\n",
              "      <td>...</td>\n",
              "      <td>752,025.00</td>\n",
              "      <td>757,734.00</td>\n",
              "      <td>760,336.00</td>\n",
              "      <td>766,163.00</td>\n",
              "      <td>771,443.00</td>\n",
              "      <td>776,607.00</td>\n",
              "      <td>779,281.00</td>\n",
              "      <td>782,367.00</td>\n",
              "      <td>788,211.00</td>\n",
              "      <td>793,924.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21205</th>\n",
              "      <td>21934</td>\n",
              "      <td>36768</td>\n",
              "      <td>zip</td>\n",
              "      <td>AL</td>\n",
              "      <td>AL</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Wilcox County</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>90,249.00</td>\n",
              "      <td>90,596.00</td>\n",
              "      <td>90,936.00</td>\n",
              "      <td>91,010.00</td>\n",
              "      <td>90,619.00</td>\n",
              "      <td>90,348.00</td>\n",
              "      <td>89,680.00</td>\n",
              "      <td>90,149.00</td>\n",
              "      <td>89,358.00</td>\n",
              "      <td>89,241.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21206</th>\n",
              "      <td>21934</td>\n",
              "      <td>17582</td>\n",
              "      <td>zip</td>\n",
              "      <td>PA</td>\n",
              "      <td>PA</td>\n",
              "      <td>Washington Boro</td>\n",
              "      <td>Lancaster, PA</td>\n",
              "      <td>Lancaster County</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>322,656.00</td>\n",
              "      <td>325,898.00</td>\n",
              "      <td>329,389.00</td>\n",
              "      <td>332,130.00</td>\n",
              "      <td>334,382.00</td>\n",
              "      <td>334,925.00</td>\n",
              "      <td>334,196.00</td>\n",
              "      <td>333,734.00</td>\n",
              "      <td>334,633.00</td>\n",
              "      <td>338,109.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21207</th>\n",
              "      <td>21934</td>\n",
              "      <td>14740</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>Gerry</td>\n",
              "      <td>Jamestown-Dunkirk-Fredonia, NY</td>\n",
              "      <td>Chautauqua County</td>\n",
              "      <td>50,791.00</td>\n",
              "      <td>50,931.00</td>\n",
              "      <td>...</td>\n",
              "      <td>151,009.00</td>\n",
              "      <td>152,305.00</td>\n",
              "      <td>155,312.00</td>\n",
              "      <td>158,570.00</td>\n",
              "      <td>162,928.00</td>\n",
              "      <td>164,508.00</td>\n",
              "      <td>165,006.00</td>\n",
              "      <td>164,405.00</td>\n",
              "      <td>163,577.00</td>\n",
              "      <td>162,744.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21208</th>\n",
              "      <td>21934</td>\n",
              "      <td>47020</td>\n",
              "      <td>zip</td>\n",
              "      <td>IN</td>\n",
              "      <td>IN</td>\n",
              "      <td>Florence</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Switzerland County</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>185,581.00</td>\n",
              "      <td>186,648.00</td>\n",
              "      <td>189,096.00</td>\n",
              "      <td>190,725.00</td>\n",
              "      <td>193,663.00</td>\n",
              "      <td>195,434.00</td>\n",
              "      <td>196,729.00</td>\n",
              "      <td>196,707.00</td>\n",
              "      <td>196,997.00</td>\n",
              "      <td>197,093.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21209</th>\n",
              "      <td>21938</td>\n",
              "      <td>28556</td>\n",
              "      <td>zip</td>\n",
              "      <td>NC</td>\n",
              "      <td>NC</td>\n",
              "      <td>Oriental</td>\n",
              "      <td>New Bern, NC</td>\n",
              "      <td>Pamlico County</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>21210 rows × 283 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-47467f0b-4029-4218-bd1f-66ce735a2621')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-47467f0b-4029-4218-bd1f-66ce735a2621 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-47467f0b-4029-4218-bd1f-66ce735a2621');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9af5de45-db17-4aaf-adf7-f6d23b914d4e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9af5de45-db17-4aaf-adf7-f6d23b914d4e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9af5de45-db17-4aaf-adf7-f6d23b914d4e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_29b27842-ad12-4fdc-8f1c-d187744da652\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('new_zillow_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_29b27842-ad12-4fdc-8f1c-d187744da652 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('new_zillow_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "new_zillow_data"
            }
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#dropping missing values\n",
        "new_zillow_data.dropna()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 860
        },
        "id": "VqoTturh30Ra",
        "outputId": "33c36058-1056-4897-b8e9-4c5d35b2ffb3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       SizeRank  RegionName RegionType StateName State            City  \\\n",
              "2             2       79936        zip        TX    TX         El Paso   \n",
              "3             3       11368        zip        NY    NY        New York   \n",
              "4             4       11385        zip        NY    NY        New York   \n",
              "6             6       60629        zip        IL    IL         Chicago   \n",
              "7             7       77084        zip        TX    TX         Houston   \n",
              "...         ...         ...        ...       ...   ...             ...   \n",
              "21184     21911       12494        zip        NY    NY     West Shokan   \n",
              "21187     21916       20667        zip        MD    MD       Park Hall   \n",
              "21196     21924       11964        zip        NY    NY  Shelter Island   \n",
              "21199     21928       83443        zip        ID    ID           Ririe   \n",
              "21207     21934       14740        zip        NY    NY           Gerry   \n",
              "\n",
              "                                       Metro          CountyName   31012000  \\\n",
              "2                                El Paso, TX      El Paso County  90,009.00   \n",
              "3      New York-Newark-Jersey City, NY-NJ-PA       Queens County 188,096.00   \n",
              "4      New York-Newark-Jersey City, NY-NJ-PA       Queens County 275,983.00   \n",
              "6         Chicago-Naperville-Elgin, IL-IN-WI         Cook County 133,187.00   \n",
              "7       Houston-The Woodlands-Sugar Land, TX       Harris County 105,991.00   \n",
              "...                                      ...                 ...        ...   \n",
              "21184                           Kingston, NY       Ulster County 142,100.00   \n",
              "21187          California-Lexington Park, MD  Saint Marys County 137,188.00   \n",
              "21196  New York-Newark-Jersey City, NY-NJ-PA      Suffolk County 328,122.00   \n",
              "21199                        Idaho Falls, ID   Bonneville County  77,502.00   \n",
              "21207         Jamestown-Dunkirk-Fredonia, NY   Chautauqua County  50,791.00   \n",
              "\n",
              "        29022000  ...     28022022     31032022     30042022     31052022  \\\n",
              "2      90,009.00  ...   177,319.00   179,463.00   182,812.00   186,403.00   \n",
              "3     190,588.00  ...   570,211.00   572,145.00   573,662.00   576,469.00   \n",
              "4     277,855.00  ...   752,025.00   757,734.00   760,336.00   766,163.00   \n",
              "6     133,355.00  ...   253,032.00   254,870.00   256,829.00   260,300.00   \n",
              "7     105,935.00  ...   255,563.00   260,781.00   266,527.00   272,002.00   \n",
              "...          ...  ...          ...          ...          ...          ...   \n",
              "21184 143,441.00  ...   451,720.00   456,205.00   453,452.00   457,121.00   \n",
              "21187 137,392.00  ...   337,175.00   338,850.00   341,432.00   344,652.00   \n",
              "21196 321,669.00  ... 1,405,837.00 1,434,639.00 1,463,443.00 1,490,738.00   \n",
              "21199  77,373.00  ...   341,213.00   343,406.00   346,635.00   347,684.00   \n",
              "21207  50,931.00  ...   151,009.00   152,305.00   155,312.00   158,570.00   \n",
              "\n",
              "          30062022     31072022     31082022     30092022     31102022  \\\n",
              "2       189,836.00   192,064.00   193,760.00   195,140.00   196,787.00   \n",
              "3       578,706.00   580,834.00   581,779.00   584,566.00   588,188.00   \n",
              "4       771,443.00   776,607.00   779,281.00   782,367.00   788,211.00   \n",
              "6       262,674.00   263,545.00   263,053.00   263,063.00   263,005.00   \n",
              "7       276,365.00   279,253.00   280,902.00   281,596.00   282,745.00   \n",
              "...            ...          ...          ...          ...          ...   \n",
              "21184   459,619.00   467,295.00   458,558.00   452,100.00   447,134.00   \n",
              "21187   347,910.00   349,820.00   352,556.00   353,465.00   355,795.00   \n",
              "21196 1,515,805.00 1,528,479.00 1,521,388.00 1,521,943.00 1,521,626.00   \n",
              "21199   352,139.00   356,818.00   359,108.00   359,377.00   359,029.00   \n",
              "21207   162,928.00   164,508.00   165,006.00   164,405.00   163,577.00   \n",
              "\n",
              "          30112022  \n",
              "2       198,137.00  \n",
              "3       590,722.00  \n",
              "4       793,924.00  \n",
              "6       262,805.00  \n",
              "7       283,920.00  \n",
              "...            ...  \n",
              "21184   454,311.00  \n",
              "21187   356,388.00  \n",
              "21196 1,526,169.00  \n",
              "21199   357,380.00  \n",
              "21207   162,744.00  \n",
              "\n",
              "[8613 rows x 283 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-73327301-77db-4f0b-9b58-951cd25c9e5c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SizeRank</th>\n",
              "      <th>RegionName</th>\n",
              "      <th>RegionType</th>\n",
              "      <th>StateName</th>\n",
              "      <th>State</th>\n",
              "      <th>City</th>\n",
              "      <th>Metro</th>\n",
              "      <th>CountyName</th>\n",
              "      <th>31012000</th>\n",
              "      <th>29022000</th>\n",
              "      <th>...</th>\n",
              "      <th>28022022</th>\n",
              "      <th>31032022</th>\n",
              "      <th>30042022</th>\n",
              "      <th>31052022</th>\n",
              "      <th>30062022</th>\n",
              "      <th>31072022</th>\n",
              "      <th>31082022</th>\n",
              "      <th>30092022</th>\n",
              "      <th>31102022</th>\n",
              "      <th>30112022</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>79936</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>El Paso</td>\n",
              "      <td>El Paso, TX</td>\n",
              "      <td>El Paso County</td>\n",
              "      <td>90,009.00</td>\n",
              "      <td>90,009.00</td>\n",
              "      <td>...</td>\n",
              "      <td>177,319.00</td>\n",
              "      <td>179,463.00</td>\n",
              "      <td>182,812.00</td>\n",
              "      <td>186,403.00</td>\n",
              "      <td>189,836.00</td>\n",
              "      <td>192,064.00</td>\n",
              "      <td>193,760.00</td>\n",
              "      <td>195,140.00</td>\n",
              "      <td>196,787.00</td>\n",
              "      <td>198,137.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>11368</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>188,096.00</td>\n",
              "      <td>190,588.00</td>\n",
              "      <td>...</td>\n",
              "      <td>570,211.00</td>\n",
              "      <td>572,145.00</td>\n",
              "      <td>573,662.00</td>\n",
              "      <td>576,469.00</td>\n",
              "      <td>578,706.00</td>\n",
              "      <td>580,834.00</td>\n",
              "      <td>581,779.00</td>\n",
              "      <td>584,566.00</td>\n",
              "      <td>588,188.00</td>\n",
              "      <td>590,722.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>11385</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>275,983.00</td>\n",
              "      <td>277,855.00</td>\n",
              "      <td>...</td>\n",
              "      <td>752,025.00</td>\n",
              "      <td>757,734.00</td>\n",
              "      <td>760,336.00</td>\n",
              "      <td>766,163.00</td>\n",
              "      <td>771,443.00</td>\n",
              "      <td>776,607.00</td>\n",
              "      <td>779,281.00</td>\n",
              "      <td>782,367.00</td>\n",
              "      <td>788,211.00</td>\n",
              "      <td>793,924.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>6</td>\n",
              "      <td>60629</td>\n",
              "      <td>zip</td>\n",
              "      <td>IL</td>\n",
              "      <td>IL</td>\n",
              "      <td>Chicago</td>\n",
              "      <td>Chicago-Naperville-Elgin, IL-IN-WI</td>\n",
              "      <td>Cook County</td>\n",
              "      <td>133,187.00</td>\n",
              "      <td>133,355.00</td>\n",
              "      <td>...</td>\n",
              "      <td>253,032.00</td>\n",
              "      <td>254,870.00</td>\n",
              "      <td>256,829.00</td>\n",
              "      <td>260,300.00</td>\n",
              "      <td>262,674.00</td>\n",
              "      <td>263,545.00</td>\n",
              "      <td>263,053.00</td>\n",
              "      <td>263,063.00</td>\n",
              "      <td>263,005.00</td>\n",
              "      <td>262,805.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>7</td>\n",
              "      <td>77084</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>Houston</td>\n",
              "      <td>Houston-The Woodlands-Sugar Land, TX</td>\n",
              "      <td>Harris County</td>\n",
              "      <td>105,991.00</td>\n",
              "      <td>105,935.00</td>\n",
              "      <td>...</td>\n",
              "      <td>255,563.00</td>\n",
              "      <td>260,781.00</td>\n",
              "      <td>266,527.00</td>\n",
              "      <td>272,002.00</td>\n",
              "      <td>276,365.00</td>\n",
              "      <td>279,253.00</td>\n",
              "      <td>280,902.00</td>\n",
              "      <td>281,596.00</td>\n",
              "      <td>282,745.00</td>\n",
              "      <td>283,920.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21184</th>\n",
              "      <td>21911</td>\n",
              "      <td>12494</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>West Shokan</td>\n",
              "      <td>Kingston, NY</td>\n",
              "      <td>Ulster County</td>\n",
              "      <td>142,100.00</td>\n",
              "      <td>143,441.00</td>\n",
              "      <td>...</td>\n",
              "      <td>451,720.00</td>\n",
              "      <td>456,205.00</td>\n",
              "      <td>453,452.00</td>\n",
              "      <td>457,121.00</td>\n",
              "      <td>459,619.00</td>\n",
              "      <td>467,295.00</td>\n",
              "      <td>458,558.00</td>\n",
              "      <td>452,100.00</td>\n",
              "      <td>447,134.00</td>\n",
              "      <td>454,311.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21187</th>\n",
              "      <td>21916</td>\n",
              "      <td>20667</td>\n",
              "      <td>zip</td>\n",
              "      <td>MD</td>\n",
              "      <td>MD</td>\n",
              "      <td>Park Hall</td>\n",
              "      <td>California-Lexington Park, MD</td>\n",
              "      <td>Saint Marys County</td>\n",
              "      <td>137,188.00</td>\n",
              "      <td>137,392.00</td>\n",
              "      <td>...</td>\n",
              "      <td>337,175.00</td>\n",
              "      <td>338,850.00</td>\n",
              "      <td>341,432.00</td>\n",
              "      <td>344,652.00</td>\n",
              "      <td>347,910.00</td>\n",
              "      <td>349,820.00</td>\n",
              "      <td>352,556.00</td>\n",
              "      <td>353,465.00</td>\n",
              "      <td>355,795.00</td>\n",
              "      <td>356,388.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21196</th>\n",
              "      <td>21924</td>\n",
              "      <td>11964</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>Shelter Island</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Suffolk County</td>\n",
              "      <td>328,122.00</td>\n",
              "      <td>321,669.00</td>\n",
              "      <td>...</td>\n",
              "      <td>1,405,837.00</td>\n",
              "      <td>1,434,639.00</td>\n",
              "      <td>1,463,443.00</td>\n",
              "      <td>1,490,738.00</td>\n",
              "      <td>1,515,805.00</td>\n",
              "      <td>1,528,479.00</td>\n",
              "      <td>1,521,388.00</td>\n",
              "      <td>1,521,943.00</td>\n",
              "      <td>1,521,626.00</td>\n",
              "      <td>1,526,169.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21199</th>\n",
              "      <td>21928</td>\n",
              "      <td>83443</td>\n",
              "      <td>zip</td>\n",
              "      <td>ID</td>\n",
              "      <td>ID</td>\n",
              "      <td>Ririe</td>\n",
              "      <td>Idaho Falls, ID</td>\n",
              "      <td>Bonneville County</td>\n",
              "      <td>77,502.00</td>\n",
              "      <td>77,373.00</td>\n",
              "      <td>...</td>\n",
              "      <td>341,213.00</td>\n",
              "      <td>343,406.00</td>\n",
              "      <td>346,635.00</td>\n",
              "      <td>347,684.00</td>\n",
              "      <td>352,139.00</td>\n",
              "      <td>356,818.00</td>\n",
              "      <td>359,108.00</td>\n",
              "      <td>359,377.00</td>\n",
              "      <td>359,029.00</td>\n",
              "      <td>357,380.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21207</th>\n",
              "      <td>21934</td>\n",
              "      <td>14740</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>Gerry</td>\n",
              "      <td>Jamestown-Dunkirk-Fredonia, NY</td>\n",
              "      <td>Chautauqua County</td>\n",
              "      <td>50,791.00</td>\n",
              "      <td>50,931.00</td>\n",
              "      <td>...</td>\n",
              "      <td>151,009.00</td>\n",
              "      <td>152,305.00</td>\n",
              "      <td>155,312.00</td>\n",
              "      <td>158,570.00</td>\n",
              "      <td>162,928.00</td>\n",
              "      <td>164,508.00</td>\n",
              "      <td>165,006.00</td>\n",
              "      <td>164,405.00</td>\n",
              "      <td>163,577.00</td>\n",
              "      <td>162,744.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8613 rows × 283 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-73327301-77db-4f0b-9b58-951cd25c9e5c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-73327301-77db-4f0b-9b58-951cd25c9e5c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-73327301-77db-4f0b-9b58-951cd25c9e5c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-29c6db01-67c3-44a8-a716-4aa73d0309f1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-29c6db01-67c3-44a8-a716-4aa73d0309f1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-29c6db01-67c3-44a8-a716-4aa73d0309f1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop the columns that are not date columns\n",
        "columns_with_no_date = ['RegionID', 'SizeRank', 'RegionName', 'RegionType', 'StateName', 'State', 'City', 'Metro', 'CountyName']\n",
        "date_columns = zillow_data.columns.difference(columns_with_no_date)\n",
        "date_columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jW86s-GjQ8o8",
        "outputId": "2a70da62-e96b-4783-e18c-a1d4b239a273"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['28022001', '28022002', '28022003', '28022005', '28022006', '28022007',\n",
              "       '28022009', '28022010', '28022011', '28022013',\n",
              "       ...\n",
              "       '31122012', '31122013', '31122014', '31122015', '31122016', '31122017',\n",
              "       '31122018', '31122019', '31122020', '31122021'],\n",
              "      dtype='object', length=275)"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Melt the wide-form data into a long-form time series\n",
        "# Melt the DataFrame\n",
        "melted = pd.melt(zillow_data, id_vars=columns_with_no_date, value_vars=date_columns, var_name='date', value_name='Value')\n",
        "melted"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "kYUclvj9Ihpf",
        "outputId": "af44c37d-776e-4d33-eed6-3c49fa52e610"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         RegionID  SizeRank  RegionName RegionType StateName State  \\\n",
              "0           91940         0       77449        zip        TX    TX   \n",
              "1           91982         1       77494        zip        TX    TX   \n",
              "2           93144         2       79936        zip        TX    TX   \n",
              "3           62080         3       11368        zip        NY    NY   \n",
              "4           62093         4       11385        zip        NY    NY   \n",
              "...           ...       ...         ...        ...       ...   ...   \n",
              "5832745     74039     21934       36768        zip        AL    AL   \n",
              "5832746     65127     21934       17582        zip        PA    PA   \n",
              "5832747     63700     21934       14740        zip        NY    NY   \n",
              "5832748     78407     21934       47020        zip        IN    IN   \n",
              "5832749     70029     21938       28556        zip        NC    NC   \n",
              "\n",
              "                    City                                  Metro  \\\n",
              "0                    NaN   Houston-The Woodlands-Sugar Land, TX   \n",
              "1                    NaN   Houston-The Woodlands-Sugar Land, TX   \n",
              "2                El Paso                            El Paso, TX   \n",
              "3               New York  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "4               New York  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "...                  ...                                    ...   \n",
              "5832745              NaN                                    NaN   \n",
              "5832746  Washington Boro                          Lancaster, PA   \n",
              "5832747            Gerry         Jamestown-Dunkirk-Fredonia, NY   \n",
              "5832748         Florence                                    NaN   \n",
              "5832749         Oriental                           New Bern, NC   \n",
              "\n",
              "                 CountyName      date      Value  \n",
              "0             Harris County  28022001 109,045.00  \n",
              "1          Fort Bend County  28022001 226,052.00  \n",
              "2            El Paso County  28022001  87,845.00  \n",
              "3             Queens County  28022001 220,488.00  \n",
              "4             Queens County  28022001 302,885.00  \n",
              "...                     ...       ...        ...  \n",
              "5832745       Wilcox County  31122021  87,852.00  \n",
              "5832746    Lancaster County  31122021 316,089.00  \n",
              "5832747   Chautauqua County  31122021 146,750.00  \n",
              "5832748  Switzerland County  31122021 182,323.00  \n",
              "5832749      Pamlico County  31122021        NaN  \n",
              "\n",
              "[5832750 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-818cbd6c-809b-48ad-bfcf-ce389b870e91\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RegionID</th>\n",
              "      <th>SizeRank</th>\n",
              "      <th>RegionName</th>\n",
              "      <th>RegionType</th>\n",
              "      <th>StateName</th>\n",
              "      <th>State</th>\n",
              "      <th>City</th>\n",
              "      <th>Metro</th>\n",
              "      <th>CountyName</th>\n",
              "      <th>date</th>\n",
              "      <th>Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>91940</td>\n",
              "      <td>0</td>\n",
              "      <td>77449</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Houston-The Woodlands-Sugar Land, TX</td>\n",
              "      <td>Harris County</td>\n",
              "      <td>28022001</td>\n",
              "      <td>109,045.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>91982</td>\n",
              "      <td>1</td>\n",
              "      <td>77494</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Houston-The Woodlands-Sugar Land, TX</td>\n",
              "      <td>Fort Bend County</td>\n",
              "      <td>28022001</td>\n",
              "      <td>226,052.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>93144</td>\n",
              "      <td>2</td>\n",
              "      <td>79936</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>El Paso</td>\n",
              "      <td>El Paso, TX</td>\n",
              "      <td>El Paso County</td>\n",
              "      <td>28022001</td>\n",
              "      <td>87,845.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>62080</td>\n",
              "      <td>3</td>\n",
              "      <td>11368</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>28022001</td>\n",
              "      <td>220,488.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>62093</td>\n",
              "      <td>4</td>\n",
              "      <td>11385</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>28022001</td>\n",
              "      <td>302,885.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5832745</th>\n",
              "      <td>74039</td>\n",
              "      <td>21934</td>\n",
              "      <td>36768</td>\n",
              "      <td>zip</td>\n",
              "      <td>AL</td>\n",
              "      <td>AL</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Wilcox County</td>\n",
              "      <td>31122021</td>\n",
              "      <td>87,852.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5832746</th>\n",
              "      <td>65127</td>\n",
              "      <td>21934</td>\n",
              "      <td>17582</td>\n",
              "      <td>zip</td>\n",
              "      <td>PA</td>\n",
              "      <td>PA</td>\n",
              "      <td>Washington Boro</td>\n",
              "      <td>Lancaster, PA</td>\n",
              "      <td>Lancaster County</td>\n",
              "      <td>31122021</td>\n",
              "      <td>316,089.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5832747</th>\n",
              "      <td>63700</td>\n",
              "      <td>21934</td>\n",
              "      <td>14740</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>Gerry</td>\n",
              "      <td>Jamestown-Dunkirk-Fredonia, NY</td>\n",
              "      <td>Chautauqua County</td>\n",
              "      <td>31122021</td>\n",
              "      <td>146,750.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5832748</th>\n",
              "      <td>78407</td>\n",
              "      <td>21934</td>\n",
              "      <td>47020</td>\n",
              "      <td>zip</td>\n",
              "      <td>IN</td>\n",
              "      <td>IN</td>\n",
              "      <td>Florence</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Switzerland County</td>\n",
              "      <td>31122021</td>\n",
              "      <td>182,323.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5832749</th>\n",
              "      <td>70029</td>\n",
              "      <td>21938</td>\n",
              "      <td>28556</td>\n",
              "      <td>zip</td>\n",
              "      <td>NC</td>\n",
              "      <td>NC</td>\n",
              "      <td>Oriental</td>\n",
              "      <td>New Bern, NC</td>\n",
              "      <td>Pamlico County</td>\n",
              "      <td>31122021</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5832750 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-818cbd6c-809b-48ad-bfcf-ce389b870e91')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-818cbd6c-809b-48ad-bfcf-ce389b870e91 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-818cbd6c-809b-48ad-bfcf-ce389b870e91');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8e32f66a-1cc5-4ca9-a415-8f1c931463cf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8e32f66a-1cc5-4ca9-a415-8f1c931463cf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8e32f66a-1cc5-4ca9-a415-8f1c931463cf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_51705f66-dd9c-41f1-be4a-4acdcce4521b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('melted')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_51705f66-dd9c-41f1-be4a-4acdcce4521b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('melted');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "melted"
            }
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "melted.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mVWEeJeTX3rk",
        "outputId": "e6305622-22f0-4cdf-fddd-d902fa16f5f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['RegionID', 'SizeRank', 'RegionName', 'RegionType', 'StateName',\n",
              "       'State', 'City', 'Metro', 'CountyName', 'date', 'Value'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#The date column should be named “Date”\n",
        "melted.rename(columns={'date': 'Date'}, inplace=True)\n",
        "melted"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "mfUT4zcNK-A5",
        "outputId": "08494d68-e4bb-40e4-8904-fe28e7b86968"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         RegionID  SizeRank  RegionName RegionType StateName State  \\\n",
              "0           91940         0       77449        zip        TX    TX   \n",
              "1           91982         1       77494        zip        TX    TX   \n",
              "2           93144         2       79936        zip        TX    TX   \n",
              "3           62080         3       11368        zip        NY    NY   \n",
              "4           62093         4       11385        zip        NY    NY   \n",
              "...           ...       ...         ...        ...       ...   ...   \n",
              "5832745     74039     21934       36768        zip        AL    AL   \n",
              "5832746     65127     21934       17582        zip        PA    PA   \n",
              "5832747     63700     21934       14740        zip        NY    NY   \n",
              "5832748     78407     21934       47020        zip        IN    IN   \n",
              "5832749     70029     21938       28556        zip        NC    NC   \n",
              "\n",
              "                    City                                  Metro  \\\n",
              "0                    NaN   Houston-The Woodlands-Sugar Land, TX   \n",
              "1                    NaN   Houston-The Woodlands-Sugar Land, TX   \n",
              "2                El Paso                            El Paso, TX   \n",
              "3               New York  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "4               New York  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "...                  ...                                    ...   \n",
              "5832745              NaN                                    NaN   \n",
              "5832746  Washington Boro                          Lancaster, PA   \n",
              "5832747            Gerry         Jamestown-Dunkirk-Fredonia, NY   \n",
              "5832748         Florence                                    NaN   \n",
              "5832749         Oriental                           New Bern, NC   \n",
              "\n",
              "                 CountyName      Date      Value  \n",
              "0             Harris County  28022001 109,045.00  \n",
              "1          Fort Bend County  28022001 226,052.00  \n",
              "2            El Paso County  28022001  87,845.00  \n",
              "3             Queens County  28022001 220,488.00  \n",
              "4             Queens County  28022001 302,885.00  \n",
              "...                     ...       ...        ...  \n",
              "5832745       Wilcox County  31122021  87,852.00  \n",
              "5832746    Lancaster County  31122021 316,089.00  \n",
              "5832747   Chautauqua County  31122021 146,750.00  \n",
              "5832748  Switzerland County  31122021 182,323.00  \n",
              "5832749      Pamlico County  31122021        NaN  \n",
              "\n",
              "[5832750 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6cb3ed51-02e1-4341-92e0-54cbbcd0aa3c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RegionID</th>\n",
              "      <th>SizeRank</th>\n",
              "      <th>RegionName</th>\n",
              "      <th>RegionType</th>\n",
              "      <th>StateName</th>\n",
              "      <th>State</th>\n",
              "      <th>City</th>\n",
              "      <th>Metro</th>\n",
              "      <th>CountyName</th>\n",
              "      <th>Date</th>\n",
              "      <th>Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>91940</td>\n",
              "      <td>0</td>\n",
              "      <td>77449</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Houston-The Woodlands-Sugar Land, TX</td>\n",
              "      <td>Harris County</td>\n",
              "      <td>28022001</td>\n",
              "      <td>109,045.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>91982</td>\n",
              "      <td>1</td>\n",
              "      <td>77494</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Houston-The Woodlands-Sugar Land, TX</td>\n",
              "      <td>Fort Bend County</td>\n",
              "      <td>28022001</td>\n",
              "      <td>226,052.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>93144</td>\n",
              "      <td>2</td>\n",
              "      <td>79936</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>El Paso</td>\n",
              "      <td>El Paso, TX</td>\n",
              "      <td>El Paso County</td>\n",
              "      <td>28022001</td>\n",
              "      <td>87,845.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>62080</td>\n",
              "      <td>3</td>\n",
              "      <td>11368</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>28022001</td>\n",
              "      <td>220,488.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>62093</td>\n",
              "      <td>4</td>\n",
              "      <td>11385</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>28022001</td>\n",
              "      <td>302,885.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5832745</th>\n",
              "      <td>74039</td>\n",
              "      <td>21934</td>\n",
              "      <td>36768</td>\n",
              "      <td>zip</td>\n",
              "      <td>AL</td>\n",
              "      <td>AL</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Wilcox County</td>\n",
              "      <td>31122021</td>\n",
              "      <td>87,852.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5832746</th>\n",
              "      <td>65127</td>\n",
              "      <td>21934</td>\n",
              "      <td>17582</td>\n",
              "      <td>zip</td>\n",
              "      <td>PA</td>\n",
              "      <td>PA</td>\n",
              "      <td>Washington Boro</td>\n",
              "      <td>Lancaster, PA</td>\n",
              "      <td>Lancaster County</td>\n",
              "      <td>31122021</td>\n",
              "      <td>316,089.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5832747</th>\n",
              "      <td>63700</td>\n",
              "      <td>21934</td>\n",
              "      <td>14740</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>Gerry</td>\n",
              "      <td>Jamestown-Dunkirk-Fredonia, NY</td>\n",
              "      <td>Chautauqua County</td>\n",
              "      <td>31122021</td>\n",
              "      <td>146,750.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5832748</th>\n",
              "      <td>78407</td>\n",
              "      <td>21934</td>\n",
              "      <td>47020</td>\n",
              "      <td>zip</td>\n",
              "      <td>IN</td>\n",
              "      <td>IN</td>\n",
              "      <td>Florence</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Switzerland County</td>\n",
              "      <td>31122021</td>\n",
              "      <td>182,323.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5832749</th>\n",
              "      <td>70029</td>\n",
              "      <td>21938</td>\n",
              "      <td>28556</td>\n",
              "      <td>zip</td>\n",
              "      <td>NC</td>\n",
              "      <td>NC</td>\n",
              "      <td>Oriental</td>\n",
              "      <td>New Bern, NC</td>\n",
              "      <td>Pamlico County</td>\n",
              "      <td>31122021</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5832750 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6cb3ed51-02e1-4341-92e0-54cbbcd0aa3c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6cb3ed51-02e1-4341-92e0-54cbbcd0aa3c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6cb3ed51-02e1-4341-92e0-54cbbcd0aa3c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e9b8cd88-2b4f-4010-a818-f9f0be602b7b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e9b8cd88-2b4f-4010-a818-f9f0be602b7b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e9b8cd88-2b4f-4010-a818-f9f0be602b7b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_67b1c665-c4a7-4e28-a644-b5c843f9524a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('melted')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_67b1c665-c4a7-4e28-a644-b5c843f9524a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('melted');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "melted"
            }
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert the 'Date' column to a datetime datatype\n",
        "# Convert the 'Date' column to datetime format\n",
        "melted['Date'] = pd.to_datetime(melted['Date'], format='%d%m%Y')\n",
        "\n",
        "# Format the 'Date' column using strftime\n",
        "melted['Formatted Date'] = melted['Date'].dt.strftime(\"%m/%d/%Y\")\n",
        "melted['Formatted Date']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ni6m11Xbb9J6",
        "outputId": "3fb921cb-a1cb-4d16-b858-a046042d1789"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0          02/28/2001\n",
              "1          02/28/2001\n",
              "2          02/28/2001\n",
              "3          02/28/2001\n",
              "4          02/28/2001\n",
              "              ...    \n",
              "5832745    12/31/2021\n",
              "5832746    12/31/2021\n",
              "5832747    12/31/2021\n",
              "5832748    12/31/2021\n",
              "5832749    12/31/2021\n",
              "Name: Formatted Date, Length: 5832750, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#set Date as the Index\n",
        "melted = melted.set_index('Date')\n",
        "melted"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "nW7bFVMVUKo3",
        "outputId": "7648a9f1-57a7-49ed-c299-8e68545e3015"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            RegionID  SizeRank  RegionName RegionType StateName State  \\\n",
              "Date                                                                    \n",
              "2001-02-28     91940         0       77449        zip        TX    TX   \n",
              "2001-02-28     91982         1       77494        zip        TX    TX   \n",
              "2001-02-28     93144         2       79936        zip        TX    TX   \n",
              "2001-02-28     62080         3       11368        zip        NY    NY   \n",
              "2001-02-28     62093         4       11385        zip        NY    NY   \n",
              "...              ...       ...         ...        ...       ...   ...   \n",
              "2021-12-31     74039     21934       36768        zip        AL    AL   \n",
              "2021-12-31     65127     21934       17582        zip        PA    PA   \n",
              "2021-12-31     63700     21934       14740        zip        NY    NY   \n",
              "2021-12-31     78407     21934       47020        zip        IN    IN   \n",
              "2021-12-31     70029     21938       28556        zip        NC    NC   \n",
              "\n",
              "                       City                                  Metro  \\\n",
              "Date                                                                 \n",
              "2001-02-28              NaN   Houston-The Woodlands-Sugar Land, TX   \n",
              "2001-02-28              NaN   Houston-The Woodlands-Sugar Land, TX   \n",
              "2001-02-28          El Paso                            El Paso, TX   \n",
              "2001-02-28         New York  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "2001-02-28         New York  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "...                     ...                                    ...   \n",
              "2021-12-31              NaN                                    NaN   \n",
              "2021-12-31  Washington Boro                          Lancaster, PA   \n",
              "2021-12-31            Gerry         Jamestown-Dunkirk-Fredonia, NY   \n",
              "2021-12-31         Florence                                    NaN   \n",
              "2021-12-31         Oriental                           New Bern, NC   \n",
              "\n",
              "                    CountyName      Value Formatted Date  \n",
              "Date                                                      \n",
              "2001-02-28       Harris County 109,045.00     02/28/2001  \n",
              "2001-02-28    Fort Bend County 226,052.00     02/28/2001  \n",
              "2001-02-28      El Paso County  87,845.00     02/28/2001  \n",
              "2001-02-28       Queens County 220,488.00     02/28/2001  \n",
              "2001-02-28       Queens County 302,885.00     02/28/2001  \n",
              "...                        ...        ...            ...  \n",
              "2021-12-31       Wilcox County  87,852.00     12/31/2021  \n",
              "2021-12-31    Lancaster County 316,089.00     12/31/2021  \n",
              "2021-12-31   Chautauqua County 146,750.00     12/31/2021  \n",
              "2021-12-31  Switzerland County 182,323.00     12/31/2021  \n",
              "2021-12-31      Pamlico County        NaN     12/31/2021  \n",
              "\n",
              "[5832750 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f9e52319-8ffb-439e-9e16-5dee1320b0ab\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RegionID</th>\n",
              "      <th>SizeRank</th>\n",
              "      <th>RegionName</th>\n",
              "      <th>RegionType</th>\n",
              "      <th>StateName</th>\n",
              "      <th>State</th>\n",
              "      <th>City</th>\n",
              "      <th>Metro</th>\n",
              "      <th>CountyName</th>\n",
              "      <th>Value</th>\n",
              "      <th>Formatted Date</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2001-02-28</th>\n",
              "      <td>91940</td>\n",
              "      <td>0</td>\n",
              "      <td>77449</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Houston-The Woodlands-Sugar Land, TX</td>\n",
              "      <td>Harris County</td>\n",
              "      <td>109,045.00</td>\n",
              "      <td>02/28/2001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001-02-28</th>\n",
              "      <td>91982</td>\n",
              "      <td>1</td>\n",
              "      <td>77494</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Houston-The Woodlands-Sugar Land, TX</td>\n",
              "      <td>Fort Bend County</td>\n",
              "      <td>226,052.00</td>\n",
              "      <td>02/28/2001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001-02-28</th>\n",
              "      <td>93144</td>\n",
              "      <td>2</td>\n",
              "      <td>79936</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>El Paso</td>\n",
              "      <td>El Paso, TX</td>\n",
              "      <td>El Paso County</td>\n",
              "      <td>87,845.00</td>\n",
              "      <td>02/28/2001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001-02-28</th>\n",
              "      <td>62080</td>\n",
              "      <td>3</td>\n",
              "      <td>11368</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>220,488.00</td>\n",
              "      <td>02/28/2001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001-02-28</th>\n",
              "      <td>62093</td>\n",
              "      <td>4</td>\n",
              "      <td>11385</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>302,885.00</td>\n",
              "      <td>02/28/2001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>74039</td>\n",
              "      <td>21934</td>\n",
              "      <td>36768</td>\n",
              "      <td>zip</td>\n",
              "      <td>AL</td>\n",
              "      <td>AL</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Wilcox County</td>\n",
              "      <td>87,852.00</td>\n",
              "      <td>12/31/2021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>65127</td>\n",
              "      <td>21934</td>\n",
              "      <td>17582</td>\n",
              "      <td>zip</td>\n",
              "      <td>PA</td>\n",
              "      <td>PA</td>\n",
              "      <td>Washington Boro</td>\n",
              "      <td>Lancaster, PA</td>\n",
              "      <td>Lancaster County</td>\n",
              "      <td>316,089.00</td>\n",
              "      <td>12/31/2021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>63700</td>\n",
              "      <td>21934</td>\n",
              "      <td>14740</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>Gerry</td>\n",
              "      <td>Jamestown-Dunkirk-Fredonia, NY</td>\n",
              "      <td>Chautauqua County</td>\n",
              "      <td>146,750.00</td>\n",
              "      <td>12/31/2021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>78407</td>\n",
              "      <td>21934</td>\n",
              "      <td>47020</td>\n",
              "      <td>zip</td>\n",
              "      <td>IN</td>\n",
              "      <td>IN</td>\n",
              "      <td>Florence</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Switzerland County</td>\n",
              "      <td>182,323.00</td>\n",
              "      <td>12/31/2021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>70029</td>\n",
              "      <td>21938</td>\n",
              "      <td>28556</td>\n",
              "      <td>zip</td>\n",
              "      <td>NC</td>\n",
              "      <td>NC</td>\n",
              "      <td>Oriental</td>\n",
              "      <td>New Bern, NC</td>\n",
              "      <td>Pamlico County</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12/31/2021</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5832750 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f9e52319-8ffb-439e-9e16-5dee1320b0ab')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f9e52319-8ffb-439e-9e16-5dee1320b0ab button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f9e52319-8ffb-439e-9e16-5dee1320b0ab');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fbe5b9e6-dcb3-4e2d-afc4-9980a8c36239\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fbe5b9e6-dcb3-4e2d-afc4-9980a8c36239')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fbe5b9e6-dcb3-4e2d-afc4-9980a8c36239 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_8801edad-05ae-4148-ac90-fd18e0865b02\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('melted')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8801edad-05ae-4148-ac90-fd18e0865b02 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('melted');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "melted"
            }
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#The value column should be named “Home Value”\n",
        "melted.rename(columns={'Value': 'Home Value'}, inplace=True)\n",
        "melted"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "JA4mzFLiLPu0",
        "outputId": "2b6fa766-37fc-4176-90bc-fc656db9ee95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            RegionID  SizeRank  RegionName RegionType StateName State  \\\n",
              "Date                                                                    \n",
              "2001-02-28     91940         0       77449        zip        TX    TX   \n",
              "2001-02-28     91982         1       77494        zip        TX    TX   \n",
              "2001-02-28     93144         2       79936        zip        TX    TX   \n",
              "2001-02-28     62080         3       11368        zip        NY    NY   \n",
              "2001-02-28     62093         4       11385        zip        NY    NY   \n",
              "...              ...       ...         ...        ...       ...   ...   \n",
              "2021-12-31     74039     21934       36768        zip        AL    AL   \n",
              "2021-12-31     65127     21934       17582        zip        PA    PA   \n",
              "2021-12-31     63700     21934       14740        zip        NY    NY   \n",
              "2021-12-31     78407     21934       47020        zip        IN    IN   \n",
              "2021-12-31     70029     21938       28556        zip        NC    NC   \n",
              "\n",
              "                       City                                  Metro  \\\n",
              "Date                                                                 \n",
              "2001-02-28              NaN   Houston-The Woodlands-Sugar Land, TX   \n",
              "2001-02-28              NaN   Houston-The Woodlands-Sugar Land, TX   \n",
              "2001-02-28          El Paso                            El Paso, TX   \n",
              "2001-02-28         New York  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "2001-02-28         New York  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "...                     ...                                    ...   \n",
              "2021-12-31              NaN                                    NaN   \n",
              "2021-12-31  Washington Boro                          Lancaster, PA   \n",
              "2021-12-31            Gerry         Jamestown-Dunkirk-Fredonia, NY   \n",
              "2021-12-31         Florence                                    NaN   \n",
              "2021-12-31         Oriental                           New Bern, NC   \n",
              "\n",
              "                    CountyName  Home Value Formatted Date  \n",
              "Date                                                       \n",
              "2001-02-28       Harris County  109,045.00     02/28/2001  \n",
              "2001-02-28    Fort Bend County  226,052.00     02/28/2001  \n",
              "2001-02-28      El Paso County   87,845.00     02/28/2001  \n",
              "2001-02-28       Queens County  220,488.00     02/28/2001  \n",
              "2001-02-28       Queens County  302,885.00     02/28/2001  \n",
              "...                        ...         ...            ...  \n",
              "2021-12-31       Wilcox County   87,852.00     12/31/2021  \n",
              "2021-12-31    Lancaster County  316,089.00     12/31/2021  \n",
              "2021-12-31   Chautauqua County  146,750.00     12/31/2021  \n",
              "2021-12-31  Switzerland County  182,323.00     12/31/2021  \n",
              "2021-12-31      Pamlico County         NaN     12/31/2021  \n",
              "\n",
              "[5832750 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-af161305-0a6c-4ef4-9b7d-10218a9b9e60\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RegionID</th>\n",
              "      <th>SizeRank</th>\n",
              "      <th>RegionName</th>\n",
              "      <th>RegionType</th>\n",
              "      <th>StateName</th>\n",
              "      <th>State</th>\n",
              "      <th>City</th>\n",
              "      <th>Metro</th>\n",
              "      <th>CountyName</th>\n",
              "      <th>Home Value</th>\n",
              "      <th>Formatted Date</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2001-02-28</th>\n",
              "      <td>91940</td>\n",
              "      <td>0</td>\n",
              "      <td>77449</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Houston-The Woodlands-Sugar Land, TX</td>\n",
              "      <td>Harris County</td>\n",
              "      <td>109,045.00</td>\n",
              "      <td>02/28/2001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001-02-28</th>\n",
              "      <td>91982</td>\n",
              "      <td>1</td>\n",
              "      <td>77494</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Houston-The Woodlands-Sugar Land, TX</td>\n",
              "      <td>Fort Bend County</td>\n",
              "      <td>226,052.00</td>\n",
              "      <td>02/28/2001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001-02-28</th>\n",
              "      <td>93144</td>\n",
              "      <td>2</td>\n",
              "      <td>79936</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>El Paso</td>\n",
              "      <td>El Paso, TX</td>\n",
              "      <td>El Paso County</td>\n",
              "      <td>87,845.00</td>\n",
              "      <td>02/28/2001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001-02-28</th>\n",
              "      <td>62080</td>\n",
              "      <td>3</td>\n",
              "      <td>11368</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>220,488.00</td>\n",
              "      <td>02/28/2001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001-02-28</th>\n",
              "      <td>62093</td>\n",
              "      <td>4</td>\n",
              "      <td>11385</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>302,885.00</td>\n",
              "      <td>02/28/2001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>74039</td>\n",
              "      <td>21934</td>\n",
              "      <td>36768</td>\n",
              "      <td>zip</td>\n",
              "      <td>AL</td>\n",
              "      <td>AL</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Wilcox County</td>\n",
              "      <td>87,852.00</td>\n",
              "      <td>12/31/2021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>65127</td>\n",
              "      <td>21934</td>\n",
              "      <td>17582</td>\n",
              "      <td>zip</td>\n",
              "      <td>PA</td>\n",
              "      <td>PA</td>\n",
              "      <td>Washington Boro</td>\n",
              "      <td>Lancaster, PA</td>\n",
              "      <td>Lancaster County</td>\n",
              "      <td>316,089.00</td>\n",
              "      <td>12/31/2021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>63700</td>\n",
              "      <td>21934</td>\n",
              "      <td>14740</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>Gerry</td>\n",
              "      <td>Jamestown-Dunkirk-Fredonia, NY</td>\n",
              "      <td>Chautauqua County</td>\n",
              "      <td>146,750.00</td>\n",
              "      <td>12/31/2021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>78407</td>\n",
              "      <td>21934</td>\n",
              "      <td>47020</td>\n",
              "      <td>zip</td>\n",
              "      <td>IN</td>\n",
              "      <td>IN</td>\n",
              "      <td>Florence</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Switzerland County</td>\n",
              "      <td>182,323.00</td>\n",
              "      <td>12/31/2021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>70029</td>\n",
              "      <td>21938</td>\n",
              "      <td>28556</td>\n",
              "      <td>zip</td>\n",
              "      <td>NC</td>\n",
              "      <td>NC</td>\n",
              "      <td>Oriental</td>\n",
              "      <td>New Bern, NC</td>\n",
              "      <td>Pamlico County</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12/31/2021</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5832750 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-af161305-0a6c-4ef4-9b7d-10218a9b9e60')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-af161305-0a6c-4ef4-9b7d-10218a9b9e60 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-af161305-0a6c-4ef4-9b7d-10218a9b9e60');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0ca86147-f5c9-457d-9d8c-f46510e55b1d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0ca86147-f5c9-457d-9d8c-f46510e55b1d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0ca86147-f5c9-457d-9d8c-f46510e55b1d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_5ed804fe-d1d7-4a84-8e04-72e6faaa2e02\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('melted')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_5ed804fe-d1d7-4a84-8e04-72e6faaa2e02 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('melted');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "melted"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Filter the data**"
      ],
      "metadata": {
        "id": "-d4v78xrU2RH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Keep data from the following states:  MA, PA, NY, NJ, MD\n",
        "filtered_data = melted.loc[melted['State'].isin(['MA', 'PA', 'NY', 'NJ', 'MD'])]\n",
        "filtered_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "WgZuQgBkU55p",
        "outputId": "6ce0170e-d4e4-4b84-d81e-2d84b6af9773"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            RegionID  SizeRank  RegionName RegionType StateName State  \\\n",
              "Date                                                                    \n",
              "2001-02-28     62080         3       11368        zip        NY    NY   \n",
              "2001-02-28     62093         4       11385        zip        NY    NY   \n",
              "2001-02-28     61148        10        8701        zip        NJ    NJ   \n",
              "2001-02-28     62046        11       11236        zip        NY    NY   \n",
              "2001-02-28     62019        14       11208        zip        NY    NY   \n",
              "...              ...       ...         ...        ...       ...   ...   \n",
              "2021-12-31     62311     21924       11964        zip        NY    NY   \n",
              "2021-12-31     63740     21924       14805        zip        NY    NY   \n",
              "2021-12-31     63249     21928       13694        zip        NY    NY   \n",
              "2021-12-31     65127     21934       17582        zip        PA    PA   \n",
              "2021-12-31     63700     21934       14740        zip        NY    NY   \n",
              "\n",
              "                       City                                  Metro  \\\n",
              "Date                                                                 \n",
              "2001-02-28         New York  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "2001-02-28         New York  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "2001-02-28         Lakewood  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "2001-02-28         New York  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "2001-02-28         New York  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "...                     ...                                    ...   \n",
              "2021-12-31   Shelter Island  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "2021-12-31           Alpine                                    NaN   \n",
              "2021-12-31       Waddington                 Ogdensburg-Massena, NY   \n",
              "2021-12-31  Washington Boro                          Lancaster, PA   \n",
              "2021-12-31            Gerry         Jamestown-Dunkirk-Fredonia, NY   \n",
              "\n",
              "                       CountyName   Home Value Formatted Date  \n",
              "Date                                                           \n",
              "2001-02-28          Queens County   220,488.00     02/28/2001  \n",
              "2001-02-28          Queens County   302,885.00     02/28/2001  \n",
              "2001-02-28           Ocean County   183,685.00     02/28/2001  \n",
              "2001-02-28           Kings County   234,900.00     02/28/2001  \n",
              "2001-02-28           Kings County   216,884.00     02/28/2001  \n",
              "...                           ...          ...            ...  \n",
              "2021-12-31         Suffolk County 1,362,603.00     12/31/2021  \n",
              "2021-12-31        Schuyler County   186,432.00     12/31/2021  \n",
              "2021-12-31  Saint Lawrence County   146,220.00     12/31/2021  \n",
              "2021-12-31       Lancaster County   316,089.00     12/31/2021  \n",
              "2021-12-31      Chautauqua County   146,750.00     12/31/2021  \n",
              "\n",
              "[995225 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-404df057-ed10-4963-a8f4-541525f7c623\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RegionID</th>\n",
              "      <th>SizeRank</th>\n",
              "      <th>RegionName</th>\n",
              "      <th>RegionType</th>\n",
              "      <th>StateName</th>\n",
              "      <th>State</th>\n",
              "      <th>City</th>\n",
              "      <th>Metro</th>\n",
              "      <th>CountyName</th>\n",
              "      <th>Home Value</th>\n",
              "      <th>Formatted Date</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2001-02-28</th>\n",
              "      <td>62080</td>\n",
              "      <td>3</td>\n",
              "      <td>11368</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>220,488.00</td>\n",
              "      <td>02/28/2001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001-02-28</th>\n",
              "      <td>62093</td>\n",
              "      <td>4</td>\n",
              "      <td>11385</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>302,885.00</td>\n",
              "      <td>02/28/2001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001-02-28</th>\n",
              "      <td>61148</td>\n",
              "      <td>10</td>\n",
              "      <td>8701</td>\n",
              "      <td>zip</td>\n",
              "      <td>NJ</td>\n",
              "      <td>NJ</td>\n",
              "      <td>Lakewood</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Ocean County</td>\n",
              "      <td>183,685.00</td>\n",
              "      <td>02/28/2001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001-02-28</th>\n",
              "      <td>62046</td>\n",
              "      <td>11</td>\n",
              "      <td>11236</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Kings County</td>\n",
              "      <td>234,900.00</td>\n",
              "      <td>02/28/2001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001-02-28</th>\n",
              "      <td>62019</td>\n",
              "      <td>14</td>\n",
              "      <td>11208</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Kings County</td>\n",
              "      <td>216,884.00</td>\n",
              "      <td>02/28/2001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>62311</td>\n",
              "      <td>21924</td>\n",
              "      <td>11964</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>Shelter Island</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Suffolk County</td>\n",
              "      <td>1,362,603.00</td>\n",
              "      <td>12/31/2021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>63740</td>\n",
              "      <td>21924</td>\n",
              "      <td>14805</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Schuyler County</td>\n",
              "      <td>186,432.00</td>\n",
              "      <td>12/31/2021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>63249</td>\n",
              "      <td>21928</td>\n",
              "      <td>13694</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>Waddington</td>\n",
              "      <td>Ogdensburg-Massena, NY</td>\n",
              "      <td>Saint Lawrence County</td>\n",
              "      <td>146,220.00</td>\n",
              "      <td>12/31/2021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>65127</td>\n",
              "      <td>21934</td>\n",
              "      <td>17582</td>\n",
              "      <td>zip</td>\n",
              "      <td>PA</td>\n",
              "      <td>PA</td>\n",
              "      <td>Washington Boro</td>\n",
              "      <td>Lancaster, PA</td>\n",
              "      <td>Lancaster County</td>\n",
              "      <td>316,089.00</td>\n",
              "      <td>12/31/2021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>63700</td>\n",
              "      <td>21934</td>\n",
              "      <td>14740</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>Gerry</td>\n",
              "      <td>Jamestown-Dunkirk-Fredonia, NY</td>\n",
              "      <td>Chautauqua County</td>\n",
              "      <td>146,750.00</td>\n",
              "      <td>12/31/2021</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>995225 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-404df057-ed10-4963-a8f4-541525f7c623')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-404df057-ed10-4963-a8f4-541525f7c623 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-404df057-ed10-4963-a8f4-541525f7c623');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9da394e0-03b7-4f03-b9c5-ce9ef3b22f78\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9da394e0-03b7-4f03-b9c5-ce9ef3b22f78')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9da394e0-03b7-4f03-b9c5-ce9ef3b22f78 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_bb74a6c0-9040-49f5-b55f-ef8e273060fa\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('filtered_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_bb74a6c0-9040-49f5-b55f-ef8e273060fa button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('filtered_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "filtered_data"
            }
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Keep values from the years  2008 - 2018.\n",
        "filtered_data = melted.loc[melted.index.year.isin(range(2008, 2019))]\n",
        "filtered_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "4uaD3pMVVBiZ",
        "outputId": "bf55c8b7-1c08-4d10-ebe4-d5198a9130ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            RegionID  SizeRank  RegionName RegionType StateName State  \\\n",
              "Date                                                                    \n",
              "2009-02-28     91940         0       77449        zip        TX    TX   \n",
              "2009-02-28     91982         1       77494        zip        TX    TX   \n",
              "2009-02-28     93144         2       79936        zip        TX    TX   \n",
              "2009-02-28     62080         3       11368        zip        NY    NY   \n",
              "2009-02-28     62093         4       11385        zip        NY    NY   \n",
              "...              ...       ...         ...        ...       ...   ...   \n",
              "2018-12-31     74039     21934       36768        zip        AL    AL   \n",
              "2018-12-31     65127     21934       17582        zip        PA    PA   \n",
              "2018-12-31     63700     21934       14740        zip        NY    NY   \n",
              "2018-12-31     78407     21934       47020        zip        IN    IN   \n",
              "2018-12-31     70029     21938       28556        zip        NC    NC   \n",
              "\n",
              "                       City                                  Metro  \\\n",
              "Date                                                                 \n",
              "2009-02-28              NaN   Houston-The Woodlands-Sugar Land, TX   \n",
              "2009-02-28              NaN   Houston-The Woodlands-Sugar Land, TX   \n",
              "2009-02-28          El Paso                            El Paso, TX   \n",
              "2009-02-28         New York  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "2009-02-28         New York  New York-Newark-Jersey City, NY-NJ-PA   \n",
              "...                     ...                                    ...   \n",
              "2018-12-31              NaN                                    NaN   \n",
              "2018-12-31  Washington Boro                          Lancaster, PA   \n",
              "2018-12-31            Gerry         Jamestown-Dunkirk-Fredonia, NY   \n",
              "2018-12-31         Florence                                    NaN   \n",
              "2018-12-31         Oriental                           New Bern, NC   \n",
              "\n",
              "                    CountyName  Home Value Formatted Date  \n",
              "Date                                                       \n",
              "2009-02-28       Harris County  122,737.00     02/28/2009  \n",
              "2009-02-28    Fort Bend County  258,641.00     02/28/2009  \n",
              "2009-02-28      El Paso County  124,949.00     02/28/2009  \n",
              "2009-02-28       Queens County  374,473.00     02/28/2009  \n",
              "2009-02-28       Queens County  484,556.00     02/28/2009  \n",
              "...                        ...         ...            ...  \n",
              "2018-12-31       Wilcox County   71,103.00     12/31/2018  \n",
              "2018-12-31    Lancaster County  240,967.00     12/31/2018  \n",
              "2018-12-31   Chautauqua County   99,870.00     12/31/2018  \n",
              "2018-12-31  Switzerland County  140,845.00     12/31/2018  \n",
              "2018-12-31      Pamlico County         NaN     12/31/2018  \n",
              "\n",
              "[2799720 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8a00288e-f049-426a-af76-d57f2f3ee334\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RegionID</th>\n",
              "      <th>SizeRank</th>\n",
              "      <th>RegionName</th>\n",
              "      <th>RegionType</th>\n",
              "      <th>StateName</th>\n",
              "      <th>State</th>\n",
              "      <th>City</th>\n",
              "      <th>Metro</th>\n",
              "      <th>CountyName</th>\n",
              "      <th>Home Value</th>\n",
              "      <th>Formatted Date</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2009-02-28</th>\n",
              "      <td>91940</td>\n",
              "      <td>0</td>\n",
              "      <td>77449</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Houston-The Woodlands-Sugar Land, TX</td>\n",
              "      <td>Harris County</td>\n",
              "      <td>122,737.00</td>\n",
              "      <td>02/28/2009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2009-02-28</th>\n",
              "      <td>91982</td>\n",
              "      <td>1</td>\n",
              "      <td>77494</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Houston-The Woodlands-Sugar Land, TX</td>\n",
              "      <td>Fort Bend County</td>\n",
              "      <td>258,641.00</td>\n",
              "      <td>02/28/2009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2009-02-28</th>\n",
              "      <td>93144</td>\n",
              "      <td>2</td>\n",
              "      <td>79936</td>\n",
              "      <td>zip</td>\n",
              "      <td>TX</td>\n",
              "      <td>TX</td>\n",
              "      <td>El Paso</td>\n",
              "      <td>El Paso, TX</td>\n",
              "      <td>El Paso County</td>\n",
              "      <td>124,949.00</td>\n",
              "      <td>02/28/2009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2009-02-28</th>\n",
              "      <td>62080</td>\n",
              "      <td>3</td>\n",
              "      <td>11368</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>374,473.00</td>\n",
              "      <td>02/28/2009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2009-02-28</th>\n",
              "      <td>62093</td>\n",
              "      <td>4</td>\n",
              "      <td>11385</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York-Newark-Jersey City, NY-NJ-PA</td>\n",
              "      <td>Queens County</td>\n",
              "      <td>484,556.00</td>\n",
              "      <td>02/28/2009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-12-31</th>\n",
              "      <td>74039</td>\n",
              "      <td>21934</td>\n",
              "      <td>36768</td>\n",
              "      <td>zip</td>\n",
              "      <td>AL</td>\n",
              "      <td>AL</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Wilcox County</td>\n",
              "      <td>71,103.00</td>\n",
              "      <td>12/31/2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-12-31</th>\n",
              "      <td>65127</td>\n",
              "      <td>21934</td>\n",
              "      <td>17582</td>\n",
              "      <td>zip</td>\n",
              "      <td>PA</td>\n",
              "      <td>PA</td>\n",
              "      <td>Washington Boro</td>\n",
              "      <td>Lancaster, PA</td>\n",
              "      <td>Lancaster County</td>\n",
              "      <td>240,967.00</td>\n",
              "      <td>12/31/2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-12-31</th>\n",
              "      <td>63700</td>\n",
              "      <td>21934</td>\n",
              "      <td>14740</td>\n",
              "      <td>zip</td>\n",
              "      <td>NY</td>\n",
              "      <td>NY</td>\n",
              "      <td>Gerry</td>\n",
              "      <td>Jamestown-Dunkirk-Fredonia, NY</td>\n",
              "      <td>Chautauqua County</td>\n",
              "      <td>99,870.00</td>\n",
              "      <td>12/31/2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-12-31</th>\n",
              "      <td>78407</td>\n",
              "      <td>21934</td>\n",
              "      <td>47020</td>\n",
              "      <td>zip</td>\n",
              "      <td>IN</td>\n",
              "      <td>IN</td>\n",
              "      <td>Florence</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Switzerland County</td>\n",
              "      <td>140,845.00</td>\n",
              "      <td>12/31/2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-12-31</th>\n",
              "      <td>70029</td>\n",
              "      <td>21938</td>\n",
              "      <td>28556</td>\n",
              "      <td>zip</td>\n",
              "      <td>NC</td>\n",
              "      <td>NC</td>\n",
              "      <td>Oriental</td>\n",
              "      <td>New Bern, NC</td>\n",
              "      <td>Pamlico County</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12/31/2018</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2799720 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a00288e-f049-426a-af76-d57f2f3ee334')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8a00288e-f049-426a-af76-d57f2f3ee334 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8a00288e-f049-426a-af76-d57f2f3ee334');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d0202d2d-4766-4d83-9372-b311e7efad38\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d0202d2d-4766-4d83-9372-b311e7efad38')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d0202d2d-4766-4d83-9372-b311e7efad38 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_3646402e-e5c8-4964-aa08-3b968df63c02\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('filtered_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3646402e-e5c8-4964-aa08-3b968df63c02 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('filtered_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "filtered_data"
            }
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Save the processed data as a  .csv file in a “Data” folder inside your private repo, name the csv “Data/data-for-tableau.csv”\n",
        "# Define the file path with the file name\n",
        "file_path = '/content/drive/MyDrive/CodingDojo/02-MachineLearning/data/data-for-tableau.csv'\n",
        "\n",
        "# Save the processed data as a CSV file\n",
        "filtered_data.to_csv(file_path)\n",
        "\n",
        "print(\"Data has been saved successfully.\")"
      ],
      "metadata": {
        "id": "WYFnqV05YpEC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Resample the home values, grouped by states, to a yearly frequency (based on the beginning of the calendar year) using mean as the aggregation function.\n",
        "yearly_data = melted.resample('Y').mean()\n",
        "yearly_data"
      ],
      "metadata": {
        "id": "46pZdoTci_co",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 858
        },
        "outputId": "f24f7ae9-e1db-4efe-e1a7-0f6cf9a17788"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-78-d3709f922fc2>:2: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n",
            "  yearly_data = melted.resample('Y').mean()\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            RegionID  SizeRank  RegionName  Home Value\n",
              "Date                                                  \n",
              "2000-12-31 80,628.02 10,751.58   47,909.17  160,797.13\n",
              "2001-12-31 80,628.02 10,751.58   47,909.17  174,694.87\n",
              "2002-12-31 80,628.02 10,751.58   47,909.17  186,936.61\n",
              "2003-12-31 80,628.02 10,751.58   47,909.17  202,129.77\n",
              "2004-12-31 80,628.02 10,751.58   47,909.17  221,729.90\n",
              "2005-12-31 80,628.02 10,751.58   47,909.17  247,638.85\n",
              "2006-12-31 80,628.02 10,751.58   47,909.17  266,025.07\n",
              "2007-12-31 80,628.02 10,751.58   47,909.17  263,590.96\n",
              "2008-12-31 80,628.02 10,751.58   47,909.17  243,794.05\n",
              "2009-12-31 80,628.02 10,751.58   47,909.17  212,308.47\n",
              "2010-12-31 80,628.02 10,751.58   47,909.17  202,496.63\n",
              "2011-12-31 80,628.02 10,751.58   47,909.17  191,892.01\n",
              "2012-12-31 80,628.02 10,751.58   47,909.17  187,226.16\n",
              "2013-12-31 80,628.02 10,751.58   47,909.17  197,814.71\n",
              "2014-12-31 80,628.02 10,751.58   47,909.17  208,867.69\n",
              "2015-12-31 80,628.02 10,751.58   47,909.17  216,632.19\n",
              "2016-12-31 80,628.02 10,751.58   47,909.17  225,786.11\n",
              "2017-12-31 80,628.02 10,751.58   47,909.17  236,599.65\n",
              "2018-12-31 80,628.02 10,751.58   47,909.17  249,910.51\n",
              "2019-12-31 80,628.02 10,751.58   47,909.17  257,406.82\n",
              "2020-12-31 80,628.02 10,751.58   47,909.17  267,317.12\n",
              "2021-12-31 80,628.02 10,751.58   47,909.17  304,046.12\n",
              "2022-12-31 80,628.02 10,751.58   47,909.17  348,593.59"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4dc0af43-1b78-449b-89f7-277396787107\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RegionID</th>\n",
              "      <th>SizeRank</th>\n",
              "      <th>RegionName</th>\n",
              "      <th>Home Value</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2000-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>160,797.13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>174,694.87</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2002-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>186,936.61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2003-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>202,129.77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2004-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>221,729.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2005-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>247,638.85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2006-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>266,025.07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2007-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>263,590.96</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2008-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>243,794.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2009-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>212,308.47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>202,496.63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>191,892.01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>187,226.16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>197,814.71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>208,867.69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>216,632.19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>225,786.11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>236,599.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>249,910.51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>257,406.82</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>267,317.12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>304,046.12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-12-31</th>\n",
              "      <td>80,628.02</td>\n",
              "      <td>10,751.58</td>\n",
              "      <td>47,909.17</td>\n",
              "      <td>348,593.59</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4dc0af43-1b78-449b-89f7-277396787107')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4dc0af43-1b78-449b-89f7-277396787107 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4dc0af43-1b78-449b-89f7-277396787107');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7eef488b-0f88-4dca-96ed-97983ecb0231\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7eef488b-0f88-4dca-96ed-97983ecb0231')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7eef488b-0f88-4dca-96ed-97983ecb0231 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_d7f4f966-b67c-4ba0-9c09-878381246a43\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('yearly_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d7f4f966-b67c-4ba0-9c09-878381246a43 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('yearly_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "yearly_data",
              "summary": "{\n  \"name\": \"yearly_data\",\n  \"rows\": 23,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2000-12-31 00:00:00\",\n        \"max\": \"2022-12-31 00:00:00\",\n        \"num_unique_values\": 23,\n        \"samples\": [\n          \"2015-12-31 00:00:00\",\n          \"2009-12-31 00:00:00\",\n          \"2000-12-31 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RegionID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.975793078923278e-11,\n        \"min\": 80628.01947194719,\n        \"max\": 80628.01947194719,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          80628.01947194719\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SizeRank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.859870674327049e-12,\n        \"min\": 10751.58142385667,\n        \"max\": 10751.58142385667,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          10751.58142385667\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RegionName\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.439482697308195e-12,\n        \"min\": 47909.17487034418,\n        \"max\": 47909.17487034418,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          47909.17487034418\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Home Value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43497.739574262654,\n        \"min\": 160797.1250174253,\n        \"max\": 348593.5871964111,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          216632.1904343392\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Plot a line graph with each of the states as a separate line.\n",
        "yearly_data.plot(figsize=(10, 6))\n"
      ],
      "metadata": {
        "id": "fA_aFWBgqQum",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 560
        },
        "outputId": "528310be-ed4d-40d3-9bf6-9ff2bf67456c"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 79
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Part 3)Tableau Story Link**"
      ],
      "metadata": {
        "id": "uQoP5AM04RY0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "https://public.tableau.com/app/profile/nyakato.dianah/viz/DataVisualisationBeltExam/STORY?publish=yes"
      ],
      "metadata": {
        "id": "d9WHnqcI4gPi"
      }
    }
  ]
}
